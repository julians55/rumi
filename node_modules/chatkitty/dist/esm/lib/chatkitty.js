import { BehaviorSubject, Subject } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
import { environment } from '../environment/environment';
import StompX from '../stompx';
import { AddedChannelModeratorResult, CannotAddModeratorToChannelError, ChannelNotInvitableError, ChannelNotPubliclyJoinableError, ClearChannelHistorySucceededResult, CreatedChannelResult, DeletedChannelResult, GetChannelsSucceededResult, GetChannelSucceededResult, GetChannelUnreadSucceededResult, HideChannelSucceededResult, InvitedUserResult, JoinedChannelResult, LeftChannelResult, MutedChannelResult, NotAChannelMemberError, ReadChannelSucceededResult, UnmutedChannelResult, UpdatedChannelResult, } from './channel';
import { StartedChatSessionResult, } from './chat-session';
import { GetCurrentUserSuccessfulResult, UpdatedCurrentUserDisplayPictureResult, UpdatedCurrentUserResult, } from './current-user';
import { TriggeredEventResult } from "./event";
import { ChatKittyUploadResult, } from './file';
import { DeleteMessageForMeSucceededResult, DeleteMessageSucceededResult, EditedMessageSucceededResult, GetLastReadMessageResult, GetMessageChannelSucceededResult, GetMessageParentSucceededResult, GetMessagesSucceededResult, isFileMessage, MessageNotAReplyError, ReadMessageSucceededResult, SentFileMessageResult, SentTextMessageResult } from './message';
import { ChatKittyPaginator } from './pagination';
import { GetReactionsSucceededResult, ReactedToMessageResult, RemovedReactionResult, } from './reaction';
import { GetReadReceiptsSucceededResult, } from './read-receipt';
import { ChatKittyFailedResult, GetCountSucceedResult, } from './result';
import { CreatedThreadResult, GetThreadChannelSucceededResult, GetThreadMessageSucceededResult, GetThreadsSucceededResult, ReadThreadSucceededResult } from './thread';
import { BlockUserSucceededResult, GetUserIsChannelMemberSucceededResult, GetUsersSucceededResult, GetUserSucceededResult, } from './user';
import { DeleteUserBlockListItemSucceededResult, GetUserBlockListSucceededResult, } from './user-block-list-item';
import { NoActiveSessionError, SessionActiveError, StartedSessionResult, } from './user-session';
export class ChatKittyImpl {
    constructor(configuration) {
        this.configuration = configuration;
        this.currentUserSubject = new BehaviorSubject(null);
        this.lostConnectionSubject = new Subject();
        this.resumedConnectionSubject = new Subject();
        this.chatSessions = new Map();
        this.messageMapper = new MessageMapper('');
        this.keyStrokesSubject = new Subject();
        this.Calls = new (class ChatKittyCalls {
            constructor(kitty) {
                this.kitty = kitty;
                this.localStream = null;
                this.isMuted = false;
            }
            initialize(configuration) {
                // TODO
            }
            leaveCall() {
                // TODO
            }
            switchCamera() {
                // TODO
            }
            toggleMute() {
                // TODO
            }
            onParticipantAcceptedCall(onNextOrObserver) {
                // TODO
                return () => {
                    // TODO
                };
            }
            onParticipantRejectedCall(onNextOrObserver) {
                // TODO
                return () => {
                    // TODO
                };
            }
            onParticipantActive(onNextOrObserver) {
                // TODO
                return () => {
                    // TODO
                };
            }
            onParticipantLeftCall(onNextOrObserver) {
                // TODO
                return () => {
                    // TODO
                };
            }
            close() {
                // TODO
            }
        })(this);
        this.stompX = new StompX({
            isSecure: configuration.isSecure === undefined || configuration.isSecure,
            host: configuration.host || 'api.chatkitty.com',
            isDebug: !environment.production,
        });
        this.keyStrokesSubject
            .asObservable()
            .pipe(debounceTime(150))
            .subscribe((request) => {
            let destination = '';
            const channel = request.channel;
            const thread = request.thread;
            if (channel) {
                destination = channel._actions.keystrokes;
            }
            if (thread) {
                destination = thread._actions.keystrokes;
            }
            this.stompX.sendAction({
                destination,
                body: {
                    keys: request.keys,
                },
            });
        });
    }
    static getInstance(apiKey) {
        let instance = ChatKittyImpl._instances.get(apiKey);
        if (instance !== undefined) {
            return instance;
        }
        instance = new ChatKittyImpl({ apiKey: apiKey });
        ChatKittyImpl._instances.set(apiKey, instance);
        return instance;
    }
    static channelRelay(id) {
        return '/application/v1/channels/' + id + '.relay';
    }
    static userRelay(id) {
        return '/application/v1/users/' + id + '.relay';
    }
    startSession(request) {
        if (this.stompX.initialized) {
            throw new SessionActiveError();
        }
        return new Promise((resolve) => {
            this.stompX.connect({
                apiKey: this.configuration.apiKey,
                username: request.username,
                authParams: request.authParams,
                onSuccess: (user, writeFileGrant, readFileGrant) => {
                    this.stompX.listenToTopic({ topic: user._topics.self });
                    this.stompX.listenToTopic({ topic: user._topics.channels });
                    this.stompX.listenToTopic({ topic: user._topics.messages });
                    this.stompX.listenToTopic({ topic: user._topics.notifications });
                    this.stompX.listenToTopic({ topic: user._topics.contacts });
                    this.stompX.listenToTopic({ topic: user._topics.participants });
                    this.stompX.listenToTopic({ topic: user._topics.users });
                    this.stompX.listenToTopic({ topic: user._topics.reactions });
                    this.stompX.listenToTopic({ topic: user._topics.threads });
                    this.stompX.listenToTopic({ topic: user._topics.calls });
                    this.writeFileGrant = writeFileGrant;
                    this.messageMapper = new MessageMapper(readFileGrant);
                    resolve(new StartedSessionResult({ user: user }));
                },
                onConnected: (user) => {
                    this.currentUser = user;
                    this.currentUserSubject.next(user);
                },
                onConnectionLost: () => this.lostConnectionSubject.next(),
                onConnectionResumed: () => this.resumedConnectionSubject.next(),
                onError: (error) => {
                    resolve(new ChatKittyFailedResult(error));
                },
            });
        });
    }
    endSession() {
        return new Promise((resolve, reject) => {
            this.stompX.disconnect({
                onSuccess: () => {
                    this.currentUser = undefined;
                    this.currentUserSubject.next(null);
                    resolve();
                },
                onError: (e) => {
                    reject(e);
                },
            });
        });
    }
    getCurrentUser() {
        const currentUser = this.currentUser;
        if (!currentUser) {
            throw new NoActiveSessionError();
        }
        return new Promise((resolve) => {
            this.stompX.relayResource({
                destination: currentUser._relays.self,
                onSuccess: (user) => {
                    resolve(new GetCurrentUserSuccessfulResult(user));
                },
                onError: (error) => {
                    resolve(new ChatKittyFailedResult(error));
                },
            });
        });
    }
    onCurrentUserChanged(onNextOrObserver) {
        const subscription = this.currentUserSubject.subscribe((user) => {
            if (typeof onNextOrObserver === 'function') {
                onNextOrObserver(user);
            }
            else {
                onNextOrObserver.onNext(user);
            }
        });
        return () => subscription.unsubscribe();
    }
    onCurrentUserOnline(onNextOrObserver) {
        const subscription = this.resumedConnectionSubject.subscribe(() => {
            if (typeof onNextOrObserver === 'function') {
                onNextOrObserver();
            }
            else {
                if (this.currentUser) {
                    onNextOrObserver.onNext(this.currentUser);
                }
            }
        });
        return () => subscription.unsubscribe();
    }
    onCurrentUserOffline(onNextOrObserver) {
        const subscription = this.lostConnectionSubject.subscribe(() => {
            if (typeof onNextOrObserver === 'function') {
                onNextOrObserver();
            }
            else {
                if (this.currentUser) {
                    onNextOrObserver.onNext(this.currentUser);
                }
            }
        });
        return () => subscription.unsubscribe();
    }
    updateCurrentUser(update) {
        const currentUser = this.currentUser;
        if (!currentUser) {
            throw new NoActiveSessionError();
        }
        return new Promise((resolve) => {
            this.stompX.sendAction({
                destination: currentUser._actions.update,
                body: update(currentUser),
                onSuccess: (user) => {
                    this.currentUserSubject.next(user);
                    resolve(new UpdatedCurrentUserResult(user));
                },
                onError: (error) => {
                    resolve(new ChatKittyFailedResult(error));
                },
            });
        });
    }
    updateCurrentUserDisplayPicture(request) {
        const currentUser = this.currentUser;
        if (!currentUser) {
            throw new NoActiveSessionError();
        }
        return new Promise((resolve) => {
            const file = request.file;
            if (file.uri) {
                this.stompX.sendToStream({
                    stream: currentUser._streams.displayPicture,
                    grant: this.writeFileGrant,
                    file: file,
                    onSuccess: (user) => {
                        resolve(new UpdatedCurrentUserDisplayPictureResult(user));
                    },
                    onError: (error) => {
                        resolve(new ChatKittyFailedResult(error));
                    },
                    progressListener: {
                        onStarted: () => { var _a, _b; return (_b = (_a = request.progressListener) === null || _a === void 0 ? void 0 : _a.onStarted) === null || _b === void 0 ? void 0 : _b.call(_a); },
                        onProgress: (progress) => { var _a; return (_a = request.progressListener) === null || _a === void 0 ? void 0 : _a.onProgress(progress); },
                        onCompleted: () => {
                            var _a;
                            return (_a = request.progressListener) === null || _a === void 0 ? void 0 : _a.onCompleted(ChatKittyUploadResult.COMPLETED);
                        },
                        onFailed: () => {
                            var _a;
                            return (_a = request.progressListener) === null || _a === void 0 ? void 0 : _a.onCompleted(ChatKittyUploadResult.FAILED);
                        },
                        onCancelled: () => {
                            var _a;
                            return (_a = request.progressListener) === null || _a === void 0 ? void 0 : _a.onCompleted(ChatKittyUploadResult.CANCELLED);
                        },
                    },
                });
            }
            else {
                this.stompX.sendAction({
                    destination: currentUser._actions.updateDisplayPicture,
                    body: file,
                    onSuccess: (user) => {
                        resolve(new UpdatedCurrentUserResult(user));
                    },
                    onError: (error) => {
                        resolve(new ChatKittyFailedResult(error));
                    },
                });
            }
        });
    }
    updateChannel(request) {
        return new Promise((resolve) => {
            this.stompX.sendAction({
                destination: request.channel._actions.update,
                body: request.channel,
                onSuccess: (channel) => {
                    resolve(new UpdatedChannelResult(channel));
                },
                onError: (error) => {
                    resolve(new ChatKittyFailedResult(error));
                },
            });
        });
    }
    deleteChannel(request) {
        return new Promise((resolve) => {
            this.stompX.sendAction({
                destination: request.channel._actions.delete,
                body: {},
                onSuccess: () => {
                    resolve(new DeletedChannelResult());
                },
                onError: (error) => {
                    resolve(new ChatKittyFailedResult(error));
                },
            });
        });
    }
    createChannel(request) {
        const currentUser = this.currentUser;
        if (!currentUser) {
            throw new NoActiveSessionError();
        }
        return new Promise((resolve) => {
            this.stompX.sendAction({
                destination: currentUser._actions.createChannel,
                events: ['user.channel.created', 'user.channel.upserted', 'member.channel.upserted'],
                body: request,
                onSuccess: (channel) => {
                    resolve(new CreatedChannelResult(channel));
                },
                onError: (error) => {
                    resolve(new ChatKittyFailedResult(error));
                },
            });
        });
    }
    getChannels(request) {
        const currentUser = this.currentUser;
        if (!currentUser) {
            throw new NoActiveSessionError();
        }
        return new Promise((resolve) => {
            var _a, _b, _c, _d;
            const parameters = {};
            let relay = currentUser._relays.channels;
            if (isGetChannelsRequest(request)) {
                if (((_a = request.filter) === null || _a === void 0 ? void 0 : _a.joined) === false) {
                    relay = currentUser._relays.joinableChannels;
                }
                if (((_b = request.filter) === null || _b === void 0 ? void 0 : _b.joined) === true) {
                    parameters.subscribable = true;
                }
                if ((_c = request.filter) === null || _c === void 0 ? void 0 : _c.unread) {
                    relay = currentUser._relays.unreadChannels;
                }
            }
            const name = (_d = request === null || request === void 0 ? void 0 : request.filter) === null || _d === void 0 ? void 0 : _d.name;
            if (name) {
                parameters.name = name;
            }
            ChatKittyPaginator.createInstance({
                stompX: this.stompX,
                relay: relay,
                contentName: 'channels',
                parameters: parameters,
            })
                .then((paginator) => resolve(new GetChannelsSucceededResult(paginator)))
                .catch((error) => resolve(new ChatKittyFailedResult(error)));
        });
    }
    getChannel(id) {
        return new Promise((resolve) => {
            this.stompX.relayResource({
                destination: ChatKittyImpl.channelRelay(id),
                onSuccess: (channel) => {
                    resolve(new GetChannelSucceededResult(channel));
                },
                onError: (error) => {
                    resolve(new ChatKittyFailedResult(error));
                },
            });
        });
    }
    joinChannel(request) {
        const currentUser = this.currentUser;
        if (!currentUser) {
            throw new NoActiveSessionError();
        }
        const destination = request.channel._actions.join;
        if (!destination) {
            throw new ChannelNotPubliclyJoinableError(request.channel);
        }
        return new Promise((resolve) => {
            this.stompX.sendAction({
                destination: destination,
                body: request,
                onSuccess: (channel) => {
                    resolve(new JoinedChannelResult(channel));
                },
                onError: (error) => {
                    resolve(new ChatKittyFailedResult(error));
                },
            });
        });
    }
    leaveChannel(request) {
        const currentUser = this.currentUser;
        if (!currentUser) {
            throw new NoActiveSessionError();
        }
        const destination = request.channel._actions.leave;
        if (!destination) {
            throw new NotAChannelMemberError(request.channel);
        }
        return new Promise((resolve) => {
            this.stompX.sendAction({
                destination: destination,
                body: {},
                onSuccess: (channel) => {
                    resolve(new LeftChannelResult(channel));
                },
                onError: (error) => {
                    resolve(new ChatKittyFailedResult(error));
                },
            });
        });
    }
    addChannelModerator(request) {
        const destination = request.channel._actions.addModerator;
        if (!destination) {
            throw new CannotAddModeratorToChannelError(request.channel);
        }
        return new Promise((resolve) => {
            this.stompX.sendAction({
                destination: destination,
                body: request.user,
                onSuccess: (channel) => {
                    resolve(new AddedChannelModeratorResult(channel));
                },
                onError: (error) => {
                    resolve(new ChatKittyFailedResult(error));
                },
            });
        });
    }
    getUnreadChannelsCount(request) {
        var _a;
        const currentUser = this.currentUser;
        if (!currentUser) {
            throw new NoActiveSessionError();
        }
        const parameters = {
            unread: true,
        };
        if (isGetChannelsUnreadRequest(request)) {
            parameters.type = (_a = request.filter) === null || _a === void 0 ? void 0 : _a.type;
        }
        return new Promise((resolve) => {
            this.stompX.relayResource({
                destination: currentUser._relays.channelsCount,
                parameters: parameters,
                onSuccess: (resource) => {
                    resolve(new GetCountSucceedResult(resource.count));
                },
                onError: (error) => {
                    resolve(new ChatKittyFailedResult(error));
                },
            });
        });
    }
    getChannelUnread(request) {
        const currentUser = this.currentUser;
        if (!currentUser) {
            throw new NoActiveSessionError();
        }
        return new Promise((resolve) => {
            this.stompX.relayResource({
                destination: request.channel._relays.unread,
                onSuccess: (resource) => {
                    resolve(new GetChannelUnreadSucceededResult(resource.exists));
                },
                onError: (error) => {
                    resolve(new ChatKittyFailedResult(error));
                },
            });
        });
    }
    readChannel(request) {
        const currentUser = this.currentUser;
        if (!currentUser) {
            throw new NoActiveSessionError();
        }
        return new Promise((resolve) => {
            this.stompX.sendAction({
                destination: request.channel._actions.read,
                body: {},
                onSent: () => resolve(new ReadChannelSucceededResult(request.channel)),
                onError: (error) => resolve(new ChatKittyFailedResult(error)),
            });
        });
    }
    muteChannel(request) {
        const currentUser = this.currentUser;
        if (!currentUser) {
            throw new NoActiveSessionError();
        }
        return new Promise((resolve) => {
            this.stompX.sendAction({
                destination: request.channel._actions.mute,
                body: {
                    state: 'ON',
                },
                onSuccess: (channel) => {
                    resolve(new MutedChannelResult(channel));
                },
                onError: (error) => {
                    resolve(new ChatKittyFailedResult(error));
                },
            });
        });
    }
    unmuteChannel(request) {
        const currentUser = this.currentUser;
        if (!currentUser) {
            throw new NoActiveSessionError();
        }
        return new Promise((resolve) => {
            this.stompX.sendAction({
                destination: request.channel._actions.mute,
                body: {
                    state: 'OFF',
                },
                onSuccess: (channel) => {
                    resolve(new UnmutedChannelResult(channel));
                },
                onError: (error) => {
                    resolve(new ChatKittyFailedResult(error));
                },
            });
        });
    }
    clearChannelHistory(request) {
        const currentUser = this.currentUser;
        if (!currentUser) {
            throw new NoActiveSessionError();
        }
        return new Promise((resolve) => {
            this.stompX.sendAction({
                destination: request.channel._actions.clearHistory,
                body: {},
                onSuccess: (channel) => resolve(new ClearChannelHistorySucceededResult(channel)),
                onError: (error) => resolve(new ChatKittyFailedResult(error)),
            });
        });
    }
    hideChannel(request) {
        return new Promise((resolve) => {
            this.stompX.sendAction({
                destination: request.channel._actions.hide,
                body: {},
                onSuccess: (resource) => resolve(new HideChannelSucceededResult(resource)),
                onError: (error) => resolve(new ChatKittyFailedResult(error)),
            });
        });
    }
    startChatSession(request) {
        const onReceivedMessage = request.onReceivedMessage;
        const onReceivedKeystrokes = request.onReceivedKeystrokes;
        const onParticipantEnteredChat = request.onParticipantEnteredChat;
        const onParticipantLeftChat = request.onParticipantLeftChat;
        const onTypingStarted = request.onTypingStarted;
        const onTypingStopped = request.onTypingStopped;
        const onParticipantPresenceChanged = request.onParticipantPresenceChanged;
        const onEventTriggered = request.onEventTriggered;
        const onMessageUpdated = request.onMessageUpdated;
        const onChannelUpdated = request.onChannelUpdated;
        const onMessageRead = request.onMessageRead;
        const onMessageReactionAdded = request.onMessageReactionAdded;
        const onMessageReactionRemoved = request.onMessageReactionRemoved;
        const onThreadReceivedMessage = request.onThreadReceivedMessage;
        const onThreadReceivedKeystrokes = request.onThreadReceivedKeystrokes;
        const onThreadTypingStarted = request.onThreadTypingStarted;
        const onThreadTypingStopped = request.onThreadTypingStopped;
        let receivedMessageUnsubscribe;
        let receivedKeystrokesUnsubscribe;
        let participantEnteredChatUnsubscribe;
        let participantLeftChatUnsubscribe;
        let typingStartedUnsubscribe;
        let typingStoppedUnsubscribe;
        let participantPresenceChangedUnsubscribe;
        let eventTriggeredUnsubscribe;
        let messageUpdatedUnsubscribe;
        let channelUpdatedUnsubscribe;
        let messageReadUnsubscribe;
        let messageReactionAddedUnsubscribe;
        let messageReactionRemovedUnsubscribe;
        let threadReceivedMessageUnsubscribe;
        let threadReceivedKeystrokesUnsubscribe;
        let threadTypingStartedUnsubscribe;
        let threadTypingStoppedUnsubscribe;
        if (onReceivedMessage) {
            receivedMessageUnsubscribe = this.stompX.listenForEvent({
                topic: request.channel._topics.messages,
                event: 'channel.message.created',
                onSuccess: (message) => {
                    const destination = message._relays.parent;
                    if (destination) {
                        this.stompX.relayResource({
                            destination,
                            onSuccess: (parent) => {
                                onReceivedMessage(this.messageMapper.map(message), this.messageMapper.map(parent));
                            },
                        });
                    }
                    else {
                        onReceivedMessage(this.messageMapper.map(message));
                    }
                },
            });
        }
        if (onReceivedKeystrokes) {
            receivedKeystrokesUnsubscribe = this.stompX.listenForEvent({
                topic: request.channel._topics.keystrokes,
                event: 'thread.keystrokes.created',
                onSuccess: (keystrokes) => {
                    onReceivedKeystrokes(keystrokes);
                },
            });
        }
        if (onTypingStarted) {
            typingStartedUnsubscribe = this.stompX.listenForEvent({
                topic: request.channel._topics.typing,
                event: 'thread.typing.started',
                onSuccess: (user) => {
                    onTypingStarted(user);
                },
            });
        }
        if (onTypingStopped) {
            typingStoppedUnsubscribe = this.stompX.listenForEvent({
                topic: request.channel._topics.typing,
                event: 'thread.typing.stopped',
                onSuccess: (user) => {
                    onTypingStopped(user);
                },
            });
        }
        if (onParticipantEnteredChat) {
            participantEnteredChatUnsubscribe = this.stompX.listenForEvent({
                topic: request.channel._topics.participants,
                event: 'channel.participant.active',
                onSuccess: (user) => {
                    onParticipantEnteredChat(user);
                },
            });
        }
        if (onParticipantLeftChat) {
            participantLeftChatUnsubscribe = this.stompX.listenForEvent({
                topic: request.channel._topics.participants,
                event: 'channel.participant.inactive',
                onSuccess: (user) => {
                    onParticipantLeftChat(user);
                },
            });
        }
        if (onParticipantPresenceChanged) {
            participantPresenceChangedUnsubscribe = this.stompX.listenForEvent({
                topic: request.channel._topics.participants,
                event: 'participant.presence.changed',
                onSuccess: (user) => {
                    onParticipantPresenceChanged(user);
                },
            });
        }
        if (onMessageUpdated) {
            messageUpdatedUnsubscribe = this.stompX.listenForEvent({
                topic: request.channel._topics.messages,
                event: 'thread.message.updated',
                onSuccess: (message) => {
                    onMessageUpdated(message);
                },
            });
        }
        if (onEventTriggered) {
            eventTriggeredUnsubscribe = this.stompX.listenForEvent({
                topic: request.channel._topics.events,
                event: 'channel.event.triggered',
                onSuccess: (event) => {
                    onEventTriggered(event);
                },
            });
        }
        if (onChannelUpdated) {
            channelUpdatedUnsubscribe = this.stompX.listenForEvent({
                topic: request.channel._topics.self,
                event: 'channel.self.updated',
                onSuccess: (channel) => {
                    onChannelUpdated(channel);
                },
            });
        }
        if (onMessageRead) {
            messageReadUnsubscribe = this.stompX.listenForEvent({
                topic: request.channel._topics.readReceipts,
                event: 'message.read_receipt.created',
                onSuccess: (receipt) => {
                    this.stompX.relayResource({
                        destination: receipt._relays.message,
                        onSuccess: (message) => {
                            onMessageRead(message, receipt);
                        },
                    });
                },
            });
        }
        if (onMessageReactionAdded) {
            messageReactionAddedUnsubscribe = this.stompX.listenForEvent({
                topic: request.channel._topics.reactions,
                event: 'message.reaction.created',
                onSuccess: (reaction) => {
                    this.stompX.relayResource({
                        destination: reaction._relays.message,
                        onSuccess: (message) => {
                            onMessageReactionAdded(message, reaction);
                        },
                    });
                },
            });
        }
        if (onMessageReactionRemoved) {
            messageReactionRemovedUnsubscribe = this.stompX.listenForEvent({
                topic: request.channel._topics.reactions,
                event: 'message.reaction.removed',
                onSuccess: (reaction) => {
                    this.stompX.relayResource({
                        destination: reaction._relays.message,
                        onSuccess: (message) => {
                            onMessageReactionRemoved(message, reaction);
                        },
                    });
                },
            });
        }
        let end = () => {
            messageReactionRemovedUnsubscribe === null || messageReactionRemovedUnsubscribe === void 0 ? void 0 : messageReactionRemovedUnsubscribe();
            messageReactionAddedUnsubscribe === null || messageReactionAddedUnsubscribe === void 0 ? void 0 : messageReactionAddedUnsubscribe();
            messageReadUnsubscribe === null || messageReadUnsubscribe === void 0 ? void 0 : messageReadUnsubscribe();
            channelUpdatedUnsubscribe === null || channelUpdatedUnsubscribe === void 0 ? void 0 : channelUpdatedUnsubscribe();
            messageUpdatedUnsubscribe === null || messageUpdatedUnsubscribe === void 0 ? void 0 : messageUpdatedUnsubscribe();
            eventTriggeredUnsubscribe === null || eventTriggeredUnsubscribe === void 0 ? void 0 : eventTriggeredUnsubscribe();
            participantPresenceChangedUnsubscribe === null || participantPresenceChangedUnsubscribe === void 0 ? void 0 : participantPresenceChangedUnsubscribe();
            participantLeftChatUnsubscribe === null || participantLeftChatUnsubscribe === void 0 ? void 0 : participantLeftChatUnsubscribe();
            participantEnteredChatUnsubscribe === null || participantEnteredChatUnsubscribe === void 0 ? void 0 : participantEnteredChatUnsubscribe();
            typingStoppedUnsubscribe === null || typingStoppedUnsubscribe === void 0 ? void 0 : typingStoppedUnsubscribe();
            typingStartedUnsubscribe === null || typingStartedUnsubscribe === void 0 ? void 0 : typingStartedUnsubscribe();
            receivedKeystrokesUnsubscribe === null || receivedKeystrokesUnsubscribe === void 0 ? void 0 : receivedKeystrokesUnsubscribe();
            receivedMessageUnsubscribe === null || receivedMessageUnsubscribe === void 0 ? void 0 : receivedMessageUnsubscribe();
            threadReceivedMessageUnsubscribe === null || threadReceivedMessageUnsubscribe === void 0 ? void 0 : threadReceivedMessageUnsubscribe();
            threadReceivedKeystrokesUnsubscribe === null || threadReceivedKeystrokesUnsubscribe === void 0 ? void 0 : threadReceivedKeystrokesUnsubscribe();
            threadTypingStartedUnsubscribe === null || threadTypingStartedUnsubscribe === void 0 ? void 0 : threadTypingStartedUnsubscribe();
            threadTypingStoppedUnsubscribe === null || threadTypingStoppedUnsubscribe === void 0 ? void 0 : threadTypingStoppedUnsubscribe();
        };
        const channelUnsubscribe = this.stompX.listenToTopic({
            topic: request.channel._topics.self,
            onSuccess: () => {
                const messagesUnsubscribe = this.stompX.listenToTopic({
                    topic: request.channel._topics.messages,
                });
                const keystrokesUnsubscribe = this.stompX.listenToTopic({
                    topic: request.channel._topics.keystrokes,
                });
                const typingUnsubscribe = this.stompX.listenToTopic({
                    topic: request.channel._topics.typing,
                });
                const participantsUnsubscribe = this.stompX.listenToTopic({
                    topic: request.channel._topics.participants,
                });
                const readReceiptsUnsubscribe = this.stompX.listenToTopic({
                    topic: request.channel._topics.readReceipts,
                });
                const reactionsUnsubscribe = this.stompX.listenToTopic({
                    topic: request.channel._topics.reactions,
                });
                const eventsUnsubscribe = this.stompX.listenToTopic({
                    topic: request.channel._topics.events,
                });
                const superEnd = end;
                end = () => {
                    superEnd();
                    eventsUnsubscribe === null || eventsUnsubscribe === void 0 ? void 0 : eventsUnsubscribe();
                    reactionsUnsubscribe === null || reactionsUnsubscribe === void 0 ? void 0 : reactionsUnsubscribe();
                    readReceiptsUnsubscribe === null || readReceiptsUnsubscribe === void 0 ? void 0 : readReceiptsUnsubscribe();
                    participantsUnsubscribe === null || participantsUnsubscribe === void 0 ? void 0 : participantsUnsubscribe();
                    typingUnsubscribe === null || typingUnsubscribe === void 0 ? void 0 : typingUnsubscribe();
                    keystrokesUnsubscribe === null || keystrokesUnsubscribe === void 0 ? void 0 : keystrokesUnsubscribe();
                    messagesUnsubscribe === null || messagesUnsubscribe === void 0 ? void 0 : messagesUnsubscribe();
                    channelUnsubscribe();
                    this.chatSessions.delete(request.channel.id);
                };
            },
        });
        let activeThread = null;
        const session = {
            channel: request.channel,
            thread: activeThread,
            end: () => end(),
            setThread: (thread) => {
                threadReceivedMessageUnsubscribe === null || threadReceivedMessageUnsubscribe === void 0 ? void 0 : threadReceivedMessageUnsubscribe();
                threadReceivedKeystrokesUnsubscribe === null || threadReceivedKeystrokesUnsubscribe === void 0 ? void 0 : threadReceivedKeystrokesUnsubscribe();
                threadTypingStartedUnsubscribe === null || threadTypingStartedUnsubscribe === void 0 ? void 0 : threadTypingStartedUnsubscribe();
                threadTypingStoppedUnsubscribe === null || threadTypingStoppedUnsubscribe === void 0 ? void 0 : threadTypingStoppedUnsubscribe();
                if (onThreadReceivedMessage) {
                    threadReceivedMessageUnsubscribe = this.stompX.listenForEvent({
                        topic: thread._topics.messages,
                        event: 'thread.message.created',
                        onSuccess: (message) => {
                            onThreadReceivedMessage(thread, this.messageMapper.map(message));
                        },
                    });
                }
                if (onThreadReceivedKeystrokes) {
                    threadReceivedKeystrokesUnsubscribe = this.stompX.listenForEvent({
                        topic: thread._topics.keystrokes,
                        event: 'thread.keystrokes.created',
                        onSuccess: (keystrokes) => {
                            onThreadReceivedKeystrokes(thread, keystrokes);
                        },
                    });
                }
                if (onThreadTypingStarted) {
                    threadTypingStartedUnsubscribe = this.stompX.listenForEvent({
                        topic: thread._topics.typing,
                        event: 'thread.typing.started',
                        onSuccess: (user) => {
                            onThreadTypingStarted(thread, user);
                        },
                    });
                }
                if (onThreadTypingStopped) {
                    threadTypingStoppedUnsubscribe = this.stompX.listenForEvent({
                        topic: thread._topics.typing,
                        event: 'thread.typing.stopped',
                        onSuccess: (user) => {
                            onThreadTypingStopped(thread, user);
                        },
                    });
                }
                activeThread = thread;
            },
        };
        this.chatSessions.set(request.channel.id, session);
        return new StartedChatSessionResult(session);
    }
    sendMessage(request) {
        const currentUser = this.currentUser;
        if (!currentUser) {
            throw new NoActiveSessionError();
        }
        return new Promise((resolve) => {
            let destination = '';
            let stream = '';
            const sendChannelMessageRequest = request;
            if (sendChannelMessageRequest.channel !== undefined) {
                destination = sendChannelMessageRequest.channel._actions.message;
                stream = sendChannelMessageRequest.channel._streams.messages;
            }
            const sendMessageReplyRequest = request;
            if (sendMessageReplyRequest.message !== undefined) {
                destination = sendMessageReplyRequest.message._actions.reply;
                stream = sendMessageReplyRequest.message._streams.replies;
            }
            const sendThreadMessageRequest = request;
            if (sendThreadMessageRequest.thread !== undefined) {
                destination = sendThreadMessageRequest.thread._actions.message;
                stream = sendThreadMessageRequest.thread._streams.messages;
            }
            if (isSendChannelTextMessageRequest(request)) {
                this.stompX.sendAction({
                    destination: destination,
                    body: {
                        type: 'TEXT',
                        body: request.body,
                        groupTag: request.groupTag,
                        properties: request.properties,
                    },
                    onSuccess: (message) => {
                        resolve(new SentTextMessageResult(this.messageMapper.map(message)));
                    },
                    onError: (error) => {
                        resolve(new ChatKittyFailedResult(error));
                    },
                });
            }
            if (isSendChannelFileMessageRequest(request)) {
                const file = request.file;
                if (isCreateChatKittyExternalFileProperties(file)) {
                    this.stompX.sendAction({
                        destination: destination,
                        body: {
                            type: 'FILE',
                            file: file,
                            groupTag: request.groupTag,
                            properties: request.properties,
                        },
                        onSuccess: (message) => {
                            resolve(new SentFileMessageResult(this.messageMapper.map(message)));
                        },
                        onError: (error) => {
                            resolve(new ChatKittyFailedResult(error));
                        },
                    });
                }
                else {
                    const properties = new Map();
                    if (request.groupTag) {
                        properties.set('groupTag', request.groupTag);
                    }
                    if (request.properties) {
                        properties.set('properties', request.properties);
                    }
                    this.stompX.sendToStream({
                        stream: stream,
                        grant: this.writeFileGrant,
                        file: file,
                        properties: properties,
                        onSuccess: (message) => {
                            resolve(new SentFileMessageResult(this.messageMapper.map(message)));
                        },
                        onError: (error) => {
                            resolve(new ChatKittyFailedResult(error));
                        },
                        progressListener: {
                            onStarted: () => { var _a, _b; return (_b = (_a = request.progressListener) === null || _a === void 0 ? void 0 : _a.onStarted) === null || _b === void 0 ? void 0 : _b.call(_a); },
                            onProgress: (progress) => { var _a; return (_a = request.progressListener) === null || _a === void 0 ? void 0 : _a.onProgress(progress); },
                            onCompleted: () => {
                                var _a;
                                return (_a = request.progressListener) === null || _a === void 0 ? void 0 : _a.onCompleted(ChatKittyUploadResult.COMPLETED);
                            },
                            onFailed: () => {
                                var _a;
                                return (_a = request.progressListener) === null || _a === void 0 ? void 0 : _a.onCompleted(ChatKittyUploadResult.FAILED);
                            },
                            onCancelled: () => {
                                var _a;
                                return (_a = request.progressListener) === null || _a === void 0 ? void 0 : _a.onCompleted(ChatKittyUploadResult.CANCELLED);
                            },
                        },
                    });
                }
            }
        });
    }
    getMessages(request) {
        const currentUser = this.currentUser;
        if (!currentUser) {
            throw new NoActiveSessionError();
        }
        let relay = '';
        let parameters = undefined;
        if (isGetChannelMessagesRequest(request)) {
            relay = request.channel._relays.messages;
            parameters = Object.assign({}, request.filter);
        }
        if (isGetMessageRepliesRequest(request)) {
            relay = request.message._relays.replies;
        }
        return new Promise((resolve) => {
            ChatKittyPaginator.createInstance({
                stompX: this.stompX,
                relay: relay,
                parameters: parameters,
                contentName: 'messages',
                mapper: (message) => this.messageMapper.map(message),
            })
                .then((paginator) => resolve(new GetMessagesSucceededResult(paginator)))
                .catch((error) => resolve(new ChatKittyFailedResult(error)));
        });
    }
    getUnreadMessagesCount(request) {
        const currentUser = this.currentUser;
        if (!currentUser) {
            throw new NoActiveSessionError();
        }
        let relay = currentUser._relays.unreadMessagesCount;
        if (isGetUnreadMessagesCountRequest(request)) {
            relay = request.channel._relays.messagesCount;
        }
        return new Promise((resolve) => {
            this.stompX.relayResource({
                destination: relay,
                parameters: {
                    unread: true,
                },
                onSuccess: (resource) => {
                    resolve(new GetCountSucceedResult(resource.count));
                },
                onError: (error) => {
                    resolve(new ChatKittyFailedResult(error));
                },
            });
        });
    }
    triggerEvent(request) {
        const currentUser = this.currentUser;
        if (!currentUser) {
            throw new NoActiveSessionError();
        }
        return new Promise((resolve) => {
            this.stompX.sendAction({
                destination: request.channel._actions.triggerEvent,
                body: {
                    type: request.type,
                    properties: request.properties
                },
                onSent: () => {
                    resolve(new TriggeredEventResult(request.channel));
                },
                onError: (error) => {
                    resolve(new ChatKittyFailedResult(error));
                },
            });
        });
    }
    readMessage(request) {
        return new Promise((resolve) => {
            this.stompX.sendAction({
                destination: request.message._actions.read,
                body: {},
                onSent: () => resolve(new ReadMessageSucceededResult(request.message)),
                onError: (error) => resolve(new ChatKittyFailedResult(error)),
            });
        });
    }
    getLastReadMessage(request) {
        return new Promise((resolve) => {
            this.stompX.relayResource({
                destination: request.channel._relays.lastReadMessage,
                parameters: {
                    username: request.username,
                },
                onSuccess: (resource) => {
                    resolve(new GetLastReadMessageResult(resource));
                },
                onError: (error) => {
                    resolve(new ChatKittyFailedResult(error));
                },
            });
        });
    }
    editMessage(request) {
        return new Promise((resolve) => {
            this.stompX.sendAction({
                destination: request.message._actions.edit,
                body: {
                    body: request.body,
                },
                onSuccess: (message) => resolve(new EditedMessageSucceededResult(message)),
                onError: (error) => resolve(new ChatKittyFailedResult(error)),
            });
        });
    }
    getMessageRepliesCount(request) {
        return new Promise((resolve) => {
            this.stompX.relayResource({
                destination: request.message._relays.repliesCount,
                onSuccess: (resource) => {
                    resolve(new GetCountSucceedResult(resource.count));
                },
                onError: (error) => {
                    resolve(new ChatKittyFailedResult(error));
                },
            });
        });
    }
    getMessageChannel(request) {
        return new Promise((resolve) => {
            this.stompX.relayResource({
                destination: request.message._relays.channel,
                onSuccess: (resource) => {
                    resolve(new GetMessageChannelSucceededResult(resource));
                },
                onError: (error) => {
                    resolve(new ChatKittyFailedResult(error));
                },
            });
        });
    }
    getMessageParent(request) {
        return new Promise((resolve) => {
            const destination = request.message._relays.parent;
            if (!destination) {
                throw new MessageNotAReplyError(request.message);
            }
            this.stompX.relayResource({
                destination,
                onSuccess: (resource) => {
                    resolve(new GetMessageParentSucceededResult(resource));
                },
                onError: (error) => {
                    resolve(new ChatKittyFailedResult(error));
                },
            });
        });
    }
    createThread(request) {
        return new Promise((resolve) => {
            this.stompX.sendAction({
                destination: request.channel._actions.createThread,
                body: { name: request.name, properties: request.properties },
                onSuccess: (thread) => resolve(new CreatedThreadResult(thread)),
                onError: (error) => resolve(new ChatKittyFailedResult(error)),
            });
        });
    }
    getThreads(request) {
        var _a, _b;
        const parameters = {};
        if (((_a = request.filter) === null || _a === void 0 ? void 0 : _a.includeMainThread) === false) {
            parameters.includeMainThread = false;
        }
        if (((_b = request.filter) === null || _b === void 0 ? void 0 : _b.standalone) === true) {
            parameters.standalone = true;
        }
        return new Promise((resolve) => {
            ChatKittyPaginator.createInstance({
                stompX: this.stompX,
                relay: request.channel._relays.threads,
                contentName: 'threads',
                parameters,
            })
                .then((paginator) => resolve(new GetThreadsSucceededResult(paginator)))
                .catch((error) => resolve(new ChatKittyFailedResult(error)));
        });
    }
    getThreadChannel(request) {
        return new Promise((resolve) => {
            this.stompX.relayResource({
                destination: request.thread._relays.channel,
                onSuccess: (resource) => {
                    resolve(new GetThreadChannelSucceededResult(resource));
                },
                onError: (error) => {
                    resolve(new ChatKittyFailedResult(error));
                },
            });
        });
    }
    getThreadMessage(request) {
        return new Promise((resolve) => {
            this.stompX.relayResource({
                destination: request.thread._relays.message,
                onSuccess: (resource) => {
                    resolve(new GetThreadMessageSucceededResult(resource));
                },
                onError: (error) => {
                    resolve(new ChatKittyFailedResult(error));
                },
            });
        });
    }
    readThread(request) {
        const currentUser = this.currentUser;
        if (!currentUser) {
            throw new NoActiveSessionError();
        }
        return new Promise((resolve) => {
            this.stompX.sendAction({
                destination: request.thread._actions.read,
                body: {},
                onSent: () => resolve(new ReadThreadSucceededResult(request.thread)),
                onError: (error) => resolve(new ChatKittyFailedResult(error)),
            });
        });
    }
    reactToMessage(request) {
        return new Promise((resolve) => {
            this.stompX.sendAction({
                destination: request.message._actions.react,
                body: { emoji: request.emoji },
                onSuccess: (reaction) => resolve(new ReactedToMessageResult(reaction)),
                onError: (error) => resolve(new ChatKittyFailedResult(error)),
            });
        });
    }
    getReactions(request) {
        return new Promise((resolve) => {
            ChatKittyPaginator.createInstance({
                stompX: this.stompX,
                relay: request.message._relays.reactions,
                contentName: 'reactions',
            })
                .then((paginator) => resolve(new GetReactionsSucceededResult(paginator)))
                .catch((error) => resolve(new ChatKittyFailedResult(error)));
        });
    }
    removeReaction(request) {
        return new Promise((resolve) => {
            this.stompX.sendAction({
                destination: request.message._actions.removeReaction,
                body: {
                    emoji: request.emoji,
                },
                onSuccess: (reaction) => resolve(new RemovedReactionResult(reaction)),
                onError: (error) => resolve(new ChatKittyFailedResult(error)),
            });
        });
    }
    deleteMessageForMe(request) {
        return new Promise((resolve) => {
            this.stompX.sendAction({
                destination: request.message._actions.deleteForMe,
                body: {},
                onSuccess: (resource) => resolve(new DeleteMessageForMeSucceededResult(resource)),
                onError: (error) => resolve(new ChatKittyFailedResult(error)),
            });
        });
    }
    deleteMessage(request) {
        return new Promise((resolve) => {
            this.stompX.sendAction({
                destination: request.message._actions.delete,
                body: {},
                onSuccess: (resource) => resolve(new DeleteMessageSucceededResult(resource)),
                onError: (error) => resolve(new ChatKittyFailedResult(error)),
            });
        });
    }
    sendKeystrokes(request) {
        const currentUser = this.currentUser;
        if (!currentUser) {
            throw new NoActiveSessionError();
        }
        this.keyStrokesSubject.next(request);
    }
    onNotificationReceived(onNextOrObserver) {
        const currentUser = this.currentUser;
        if (!currentUser) {
            throw new NoActiveSessionError();
        }
        const unsubscribe = this.stompX.listenForEvent({
            topic: currentUser._topics.notifications,
            event: 'user.notification.created',
            onSuccess: (notification) => {
                if (typeof onNextOrObserver === 'function') {
                    onNextOrObserver(notification);
                }
                else {
                    onNextOrObserver.onNext(notification);
                }
            },
        });
        return () => unsubscribe;
    }
    onChannelJoined(onNextOrObserver) {
        const currentUser = this.currentUser;
        if (!currentUser) {
            throw new NoActiveSessionError();
        }
        const unsubscribe = this.stompX.listenForEvent({
            topic: currentUser._topics.channels,
            event: 'user.channel.joined',
            onSuccess: (channel) => {
                if (typeof onNextOrObserver === 'function') {
                    onNextOrObserver(channel);
                }
                else {
                    onNextOrObserver.onNext(channel);
                }
            },
        });
        return () => unsubscribe;
    }
    onChannelHidden(onNextOrObserver) {
        const currentUser = this.currentUser;
        if (!currentUser) {
            throw new NoActiveSessionError();
        }
        const unsubscribe = this.stompX.listenForEvent({
            topic: currentUser._topics.channels,
            event: 'user.channel.hidden',
            onSuccess: (channel) => {
                if (typeof onNextOrObserver === 'function') {
                    onNextOrObserver(channel);
                }
                else {
                    onNextOrObserver.onNext(channel);
                }
            },
        });
        return () => unsubscribe;
    }
    onChannelUnhidden(onNextOrObserver) {
        const currentUser = this.currentUser;
        if (!currentUser) {
            throw new NoActiveSessionError();
        }
        const unsubscribe = this.stompX.listenForEvent({
            topic: currentUser._topics.channels,
            event: 'user.channel.unhidden',
            onSuccess: (channel) => {
                if (typeof onNextOrObserver === 'function') {
                    onNextOrObserver(channel);
                }
                else {
                    onNextOrObserver.onNext(channel);
                }
            },
        });
        return () => unsubscribe;
    }
    onChannelLeft(onNextOrObserver) {
        const currentUser = this.currentUser;
        if (!currentUser) {
            throw new NoActiveSessionError();
        }
        const unsubscribe = this.stompX.listenForEvent({
            topic: currentUser._topics.channels,
            event: 'user.channel.left',
            onSuccess: (channel) => {
                if (typeof onNextOrObserver === 'function') {
                    onNextOrObserver(channel);
                }
                else {
                    onNextOrObserver.onNext(channel);
                }
            },
        });
        return () => unsubscribe;
    }
    onChannelUpdated(onNextOrObserver) {
        const currentUser = this.currentUser;
        if (!currentUser) {
            throw new NoActiveSessionError();
        }
        const unsubscribe = this.stompX.listenForEvent({
            topic: currentUser._topics.channels,
            event: 'user.channel.updated',
            onSuccess: (channel) => {
                if (typeof onNextOrObserver === 'function') {
                    onNextOrObserver(channel);
                }
                else {
                    onNextOrObserver.onNext(channel);
                }
            },
        });
        return () => unsubscribe;
    }
    getChannelMembers(request) {
        const currentUser = this.currentUser;
        if (!currentUser) {
            throw new NoActiveSessionError();
        }
        return new Promise((resolve) => {
            ChatKittyPaginator.createInstance({
                stompX: this.stompX,
                relay: request.channel._relays.members,
                contentName: 'users',
                parameters: Object.assign({}, request.filter),
            })
                .then((paginator) => resolve(new GetUsersSucceededResult(paginator)))
                .catch((error) => resolve(new ChatKittyFailedResult(error)));
        });
    }
    getReadReceipts(request) {
        const currentUser = this.currentUser;
        if (!currentUser) {
            throw new NoActiveSessionError();
        }
        return new Promise((resolve) => {
            ChatKittyPaginator.createInstance({
                stompX: this.stompX,
                relay: request.message._relays.readReceipts,
                contentName: 'receipts',
            })
                .then((paginator) => resolve(new GetReadReceiptsSucceededResult(paginator)))
                .catch((error) => resolve(new ChatKittyFailedResult(error)));
        });
    }
    getUsers(request) {
        const currentUser = this.currentUser;
        if (!currentUser) {
            throw new NoActiveSessionError();
        }
        return new Promise((resolve) => {
            let parameters = undefined;
            if (isGetUsersRequest(request)) {
                parameters = Object.assign({}, request.filter);
            }
            ChatKittyPaginator.createInstance({
                stompX: this.stompX,
                relay: currentUser._relays.contacts,
                contentName: 'users',
                parameters: parameters,
            })
                .then((paginator) => resolve(new GetUsersSucceededResult(paginator)))
                .catch((error) => resolve(new ChatKittyFailedResult(error)));
        });
    }
    getUsersCount(request) {
        const currentUser = this.currentUser;
        if (!currentUser) {
            throw new NoActiveSessionError();
        }
        return new Promise((resolve) => {
            let parameters = undefined;
            if (isGetUsersRequest(request)) {
                parameters = Object.assign({}, request.filter);
            }
            this.stompX.relayResource({
                destination: currentUser._relays.contactsCount,
                parameters: parameters,
                onSuccess: (resource) => {
                    resolve(new GetCountSucceedResult(resource.count));
                },
                onError: (error) => resolve(new ChatKittyFailedResult(error)),
            });
        });
    }
    onUserPresenceChanged(onNextOrObserver) {
        const currentUser = this.currentUser;
        if (!currentUser) {
            throw new NoActiveSessionError();
        }
        const unsubscribe = this.stompX.listenForEvent({
            topic: currentUser._topics.contacts,
            event: 'contact.presence.changed',
            onSuccess: (user) => {
                if (typeof onNextOrObserver === 'function') {
                    onNextOrObserver(user);
                }
                else {
                    onNextOrObserver.onNext(user);
                }
            },
        });
        return () => unsubscribe;
    }
    inviteUser(request) {
        const destination = request.channel._actions.invite;
        if (!destination) {
            throw new ChannelNotInvitableError(request.channel);
        }
        return new Promise((resolve) => {
            this.stompX.sendAction({
                destination: destination,
                body: {
                    user: request.user,
                },
                onSuccess: (resource) => {
                    resolve(new InvitedUserResult(resource));
                },
                onError: (error) => resolve(new ChatKittyFailedResult(error)),
            });
        });
    }
    onParticipantStartedTyping(onNextOrObserver) {
        const currentUser = this.currentUser;
        if (!currentUser) {
            throw new NoActiveSessionError();
        }
        const unsubscribe = this.stompX.listenForEvent({
            topic: currentUser._topics.participants,
            event: 'participant.typing.started',
            onSuccess: (participant) => {
                if (typeof onNextOrObserver === 'function') {
                    onNextOrObserver(participant);
                }
                else {
                    onNextOrObserver.onNext(participant);
                }
            },
        });
        return () => unsubscribe;
    }
    onParticipantStoppedTyping(onNextOrObserver) {
        const currentUser = this.currentUser;
        if (!currentUser) {
            throw new NoActiveSessionError();
        }
        const unsubscribe = this.stompX.listenForEvent({
            topic: currentUser._topics.participants,
            event: 'participant.typing.stopped',
            onSuccess: (participant) => {
                if (typeof onNextOrObserver === 'function') {
                    onNextOrObserver(participant);
                }
                else {
                    onNextOrObserver.onNext(participant);
                }
            },
        });
        return () => unsubscribe;
    }
    getUser(param) {
        return new Promise((resolve) => {
            this.stompX.relayResource({
                destination: ChatKittyImpl.userRelay(param),
                onSuccess: (user) => {
                    resolve(new GetUserSucceededResult(user));
                },
            });
        });
    }
    getUserIsChannelMember(request) {
        const currentUser = this.currentUser;
        if (!currentUser) {
            throw new NoActiveSessionError();
        }
        return new Promise((resolve) => {
            this.stompX.relayResource({
                destination: request.user._relays.channelMember,
                parameters: {
                    channelId: request.channel.id,
                },
                onSuccess: (resource) => {
                    resolve(new GetUserIsChannelMemberSucceededResult(resource.exists));
                },
                onError: (error) => {
                    resolve(new ChatKittyFailedResult(error));
                },
            });
        });
    }
    blockUser(request) {
        return new Promise((resolve) => {
            this.stompX.sendAction({
                destination: `/application/v1/users/${request.user.id}.block`,
                body: {},
                onSuccess: (resource) => {
                    resolve(new BlockUserSucceededResult(resource));
                },
                onError: (error) => resolve(new ChatKittyFailedResult(error)),
            });
        });
    }
    getUserBlockList() {
        const currentUser = this.currentUser;
        if (!currentUser) {
            throw new NoActiveSessionError();
        }
        return new Promise((resolve) => {
            ChatKittyPaginator.createInstance({
                stompX: this.stompX,
                relay: currentUser._relays.userBlockListItems,
                contentName: 'items',
            })
                .then((paginator) => resolve(new GetUserBlockListSucceededResult(paginator)))
                .catch((error) => resolve(new ChatKittyFailedResult(error)));
        });
    }
    deleteUserBlockListItem(request) {
        return new Promise((resolve) => {
            this.stompX.sendAction({
                destination: request.item._actions.delete,
                body: {},
                onSuccess: (resource) => resolve(new DeleteUserBlockListItemSucceededResult(resource)),
                onError: (error) => resolve(new ChatKittyFailedResult(error)),
            });
        });
    }
}
ChatKittyImpl._instances = new Map();
class MessageMapper {
    constructor(grant) {
        this.readFileGrant = grant;
    }
    map(message) {
        if (isFileMessage(message)) {
            return Object.assign(Object.assign({}, message), { file: Object.assign(Object.assign({}, message.file), { url: message.file.url + `?grant=${this.readFileGrant}` }) });
        }
        else {
            return Object.assign({}, message);
        }
    }
}
function isGetChannelsRequest(param) {
    const request = param;
    return (request === null || request === void 0 ? void 0 : request.filter) !== undefined;
}
function isGetUsersRequest(param) {
    const request = param;
    return (request === null || request === void 0 ? void 0 : request.filter) !== undefined;
}
function isGetChannelsUnreadRequest(param) {
    const request = param;
    return (request === null || request === void 0 ? void 0 : request.filter) !== undefined;
}
function isGetUnreadMessagesCountRequest(param) {
    const request = param;
    return (request === null || request === void 0 ? void 0 : request.channel) !== undefined;
}
function isSendChannelTextMessageRequest(request) {
    return request.body !== undefined;
}
function isSendChannelFileMessageRequest(request) {
    return request.file !== undefined;
}
function isGetChannelMessagesRequest(request) {
    return request.channel !== undefined;
}
function isGetMessageRepliesRequest(request) {
    return request.message !== undefined;
}
function isCreateChatKittyExternalFileProperties(result) {
    return (result.url !== undefined &&
        result.name !== undefined &&
        result.size !== undefined);
}
export default ChatKittyImpl;
//# sourceMappingURL=data:application/json;base64,