import { AddChannelModeratorRequest, AddChannelModeratorResult, Channel, ClearChannelHistoryRequest, ClearChannelHistoryResult, CreateChannelRequest, CreateChannelResult, DeleteChannelRequest, DeleteChannelResult, GetChannelMembersRequest, GetChannelResult, GetChannelsRequest, GetChannelsResult, GetChannelUnreadRequest, GetChannelUnreadResult, GetUnreadChannelsRequest, HideChannelRequest, HideChannelResult, InviteUserRequest, InviteUserResult, JoinChannelRequest, JoinChannelResult, LeaveChannelRequest, LeaveChannelResult, MuteChannelRequest, MuteChannelResult, ReadChannelRequest, ReadChannelResult, UnmuteChannelRequest, UnmuteChannelResult, UpdateChannelRequest, UpdateChannelResult } from './channel';
import { StartChatSessionRequest, StartChatSessionResult } from './chat-session';
import { CurrentUser, GetCurrentUserResult, UpdateCurrentUserDisplayPictureRequest, UpdateCurrentUserDisplayPictureResult, UpdateCurrentUserResult } from './current-user';
import { TriggerEventRequest, TriggerEventResult } from "./event";
import { SendKeystrokesRequest } from './keystrokes';
import { DeleteMessageForMeRequest, DeleteMessageForMeResult, DeleteMessageRequest, DeleteMessageResult, EditMessageRequest, EditMessageResult, GetLastReadMessageRequest, GetLastReadMessageResult, GetMessageChannelRequest, GetMessageChannelResult, GetMessageParentRequest, GetMessageParentResult, GetMessageRepliesCountRequest, GetMessagesRequest, GetMessagesResult, GetUnreadMessagesCountRequest, ReadMessageRequest, ReadMessageResult, SendMessageRequest, SendMessageResult } from './message';
import { Notification } from "./notification";
import { ChatKittyObserver, ChatKittyUnsubscribe } from './observer';
import { GetReactionsRequest, GetReactionsResult, ReactToMessageRequest, ReactToMessageResult, RemoveReactionRequest, RemoveReactionResult } from './reaction';
import { GetReadReceiptsRequest, GetReadReceiptsResult } from './read-receipt';
import { GetCountResult } from './result';
import { CreateThreadRequest, CreateThreadResult, GetThreadChannelRequest, GetThreadChannelResult, GetThreadMessageRequest, GetThreadMessageResult, GetThreadsRequest, GetThreadsResult, ReadThreadRequest, ReadThreadResult } from './thread';
import { BlockUserRequest, BlockUserResult, GetUserIsChannelMemberRequest, GetUserIsChannelMemberResult, GetUserResult, GetUsersRequest, GetUsersResult, User } from './user';
import { DeleteUserBlockListItemRequest, DeleteUserBlockListItemResult, GetUserBlockListResult } from './user-block-list-item';
import { StartSessionRequest, StartSessionResult } from './user-session';
export declare class ChatKittyImpl implements ChatKitty {
    private readonly configuration;
    private static readonly _instances;
    static getInstance(apiKey: string): ChatKitty;
    private static channelRelay;
    private static userRelay;
    private readonly stompX;
    private readonly currentUserSubject;
    private readonly lostConnectionSubject;
    private readonly resumedConnectionSubject;
    private writeFileGrant?;
    private chatSessions;
    private messageMapper;
    private keyStrokesSubject;
    currentUser?: CurrentUser;
    Calls: Calls;
    constructor(configuration: ChatKittyConfiguration);
    startSession(request: StartSessionRequest): Promise<StartSessionResult>;
    endSession(): Promise<void>;
    getCurrentUser(): Promise<GetCurrentUserResult>;
    onCurrentUserChanged(onNextOrObserver: ChatKittyObserver<CurrentUser | null> | ((user: CurrentUser | null) => void)): ChatKittyUnsubscribe;
    onCurrentUserOnline(onNextOrObserver: ChatKittyObserver<CurrentUser> | (() => void)): ChatKittyUnsubscribe;
    onCurrentUserOffline(onNextOrObserver: ChatKittyObserver<CurrentUser> | (() => void)): ChatKittyUnsubscribe;
    updateCurrentUser(update: (user: CurrentUser) => CurrentUser): Promise<UpdateCurrentUserResult>;
    updateCurrentUserDisplayPicture(request: UpdateCurrentUserDisplayPictureRequest): Promise<UpdateCurrentUserDisplayPictureResult>;
    updateChannel(request: UpdateChannelRequest): Promise<UpdateChannelResult>;
    deleteChannel(request: DeleteChannelRequest): Promise<DeleteChannelResult>;
    createChannel(request: CreateChannelRequest): Promise<CreateChannelResult>;
    getChannels(request?: GetChannelsRequest): Promise<GetChannelsResult>;
    getChannel(id: number): Promise<GetChannelResult>;
    joinChannel(request: JoinChannelRequest): Promise<JoinChannelResult>;
    leaveChannel(request: LeaveChannelRequest): Promise<LeaveChannelResult>;
    addChannelModerator(request: AddChannelModeratorRequest): Promise<AddChannelModeratorResult>;
    getUnreadChannelsCount(request?: GetUnreadChannelsRequest): Promise<GetCountResult>;
    getChannelUnread(request: GetChannelUnreadRequest): Promise<GetChannelUnreadResult>;
    readChannel(request: ReadChannelRequest): Promise<ReadChannelResult>;
    muteChannel(request: MuteChannelRequest): Promise<MuteChannelResult>;
    unmuteChannel(request: UnmuteChannelRequest): Promise<UnmuteChannelResult>;
    clearChannelHistory(request: ClearChannelHistoryRequest): Promise<ClearChannelHistoryResult>;
    hideChannel(request: HideChannelRequest): Promise<HideChannelResult>;
    startChatSession(request: StartChatSessionRequest): StartChatSessionResult;
    sendMessage(request: SendMessageRequest): Promise<SendMessageResult>;
    getMessages(request: GetMessagesRequest): Promise<GetMessagesResult>;
    getUnreadMessagesCount(request?: GetUnreadMessagesCountRequest): Promise<GetCountResult>;
    triggerEvent(request: TriggerEventRequest): Promise<TriggerEventResult>;
    readMessage(request: ReadMessageRequest): Promise<ReadMessageResult>;
    getLastReadMessage(request: GetLastReadMessageRequest): Promise<GetLastReadMessageResult>;
    editMessage(request: EditMessageRequest): Promise<EditMessageResult>;
    getMessageRepliesCount(request: GetMessageRepliesCountRequest): Promise<GetCountResult>;
    getMessageChannel(request: GetMessageChannelRequest): Promise<GetMessageChannelResult>;
    getMessageParent(request: GetMessageParentRequest): Promise<GetMessageParentResult>;
    createThread(request: CreateThreadRequest): Promise<CreateThreadResult>;
    getThreads(request: GetThreadsRequest): Promise<GetThreadsResult>;
    getThreadChannel(request: GetThreadChannelRequest): Promise<GetThreadChannelResult>;
    getThreadMessage(request: GetThreadMessageRequest): Promise<GetThreadMessageResult>;
    readThread(request: ReadThreadRequest): Promise<ReadThreadResult>;
    reactToMessage(request: ReactToMessageRequest): Promise<ReactToMessageResult>;
    getReactions(request: GetReactionsRequest): Promise<GetReactionsResult>;
    removeReaction(request: RemoveReactionRequest): Promise<RemoveReactionResult>;
    deleteMessageForMe(request: DeleteMessageForMeRequest): Promise<DeleteMessageForMeResult>;
    deleteMessage(request: DeleteMessageRequest): Promise<DeleteMessageResult>;
    sendKeystrokes(request: SendKeystrokesRequest): void;
    onNotificationReceived(onNextOrObserver: ChatKittyObserver<Notification> | ((notification: Notification) => void)): ChatKittyUnsubscribe;
    onChannelJoined(onNextOrObserver: ChatKittyObserver<Channel> | ((channel: Channel) => void)): ChatKittyUnsubscribe;
    onChannelHidden(onNextOrObserver: ChatKittyObserver<Channel> | ((channel: Channel) => void)): ChatKittyUnsubscribe;
    onChannelUnhidden(onNextOrObserver: ChatKittyObserver<Channel> | ((channel: Channel) => void)): ChatKittyUnsubscribe;
    onChannelLeft(onNextOrObserver: ChatKittyObserver<Channel> | ((channel: Channel) => void)): ChatKittyUnsubscribe;
    onChannelUpdated(onNextOrObserver: ChatKittyObserver<Channel> | ((channel: Channel) => void)): ChatKittyUnsubscribe;
    getChannelMembers(request: GetChannelMembersRequest): Promise<GetUsersResult>;
    getReadReceipts(request: GetReadReceiptsRequest): Promise<GetReadReceiptsResult>;
    getUsers(request?: GetUsersRequest): Promise<GetUsersResult>;
    getUsersCount(request?: GetUsersRequest): Promise<GetCountResult>;
    onUserPresenceChanged(onNextOrObserver: ChatKittyObserver<User> | ((user: User) => void)): ChatKittyUnsubscribe;
    inviteUser(request: InviteUserRequest): Promise<InviteUserResult>;
    onParticipantStartedTyping(onNextOrObserver: ChatKittyObserver<User> | ((participant: User) => void)): ChatKittyUnsubscribe;
    onParticipantStoppedTyping(onNextOrObserver: ChatKittyObserver<User> | ((participant: User) => void)): ChatKittyUnsubscribe;
    getUser(param: number): Promise<GetUserResult>;
    getUserIsChannelMember(request: GetUserIsChannelMemberRequest): Promise<GetUserIsChannelMemberResult>;
    blockUser(request: BlockUserRequest): Promise<BlockUserResult>;
    getUserBlockList(): Promise<GetUserBlockListResult>;
    deleteUserBlockListItem(request: DeleteUserBlockListItemRequest): Promise<DeleteUserBlockListItemResult>;
}
export declare class ChatKittyConfiguration {
    apiKey: string;
    isSecure?: boolean;
    host?: string;
}
export interface ChatKitty {
    currentUser?: CurrentUser;
    Calls: Calls;
    startSession(request: StartSessionRequest): Promise<StartSessionResult>;
    endSession(): Promise<void>;
    getCurrentUser(): Promise<GetCurrentUserResult>;
    onCurrentUserChanged(onNextOrObserver: ChatKittyObserver<CurrentUser | null> | ((user: CurrentUser | null) => void)): ChatKittyUnsubscribe;
    onCurrentUserOnline(onNextOrObserver: ChatKittyObserver<CurrentUser> | (() => void)): ChatKittyUnsubscribe;
    onCurrentUserOffline(onNextOrObserver: ChatKittyObserver<CurrentUser> | (() => void)): ChatKittyUnsubscribe;
    updateCurrentUser(update: (user: CurrentUser) => CurrentUser): Promise<UpdateCurrentUserResult>;
    updateCurrentUserDisplayPicture(request: UpdateCurrentUserDisplayPictureRequest): Promise<UpdateCurrentUserDisplayPictureResult>;
    updateChannel(request: UpdateChannelRequest): Promise<UpdateChannelResult>;
    deleteChannel(request: DeleteChannelRequest): Promise<DeleteChannelResult>;
    createChannel(request: CreateChannelRequest): Promise<CreateChannelResult>;
    getChannels(request?: GetChannelsRequest): Promise<GetChannelsResult>;
    getChannel(id: number): Promise<GetChannelResult>;
    joinChannel(request: JoinChannelRequest): Promise<JoinChannelResult>;
    leaveChannel(request: LeaveChannelRequest): Promise<LeaveChannelResult>;
    addChannelModerator(request: AddChannelModeratorRequest): Promise<AddChannelModeratorResult>;
    getUnreadChannelsCount(request?: GetUnreadChannelsRequest): Promise<GetCountResult>;
    getChannelUnread(request: GetChannelUnreadRequest): Promise<GetChannelUnreadResult>;
    readChannel(request: ReadChannelRequest): Promise<ReadChannelResult>;
    muteChannel(request: MuteChannelRequest): Promise<MuteChannelResult>;
    unmuteChannel(request: UnmuteChannelRequest): Promise<UnmuteChannelResult>;
    clearChannelHistory(request: ClearChannelHistoryRequest): Promise<ClearChannelHistoryResult>;
    hideChannel(request: HideChannelRequest): Promise<HideChannelResult>;
    startChatSession(request: StartChatSessionRequest): StartChatSessionResult;
    sendMessage(request: SendMessageRequest): Promise<SendMessageResult>;
    getMessages(request: GetMessagesRequest): Promise<GetMessagesResult>;
    getUnreadMessagesCount(request?: GetUnreadMessagesCountRequest): Promise<GetCountResult>;
    triggerEvent(request: TriggerEventRequest): Promise<TriggerEventResult>;
    readMessage(request: ReadMessageRequest): Promise<ReadMessageResult>;
    getLastReadMessage(request: GetLastReadMessageRequest): Promise<GetLastReadMessageResult>;
    editMessage(request: EditMessageRequest): Promise<EditMessageResult>;
    getMessageRepliesCount(request: GetMessageRepliesCountRequest): Promise<GetCountResult>;
    getMessageChannel(request: GetMessageChannelRequest): Promise<GetMessageChannelResult>;
    getMessageParent(request: GetMessageParentRequest): Promise<GetMessageParentResult>;
    createThread(request: CreateThreadRequest): Promise<CreateThreadResult>;
    getThreads(request: GetThreadsRequest): Promise<GetThreadsResult>;
    getThreadChannel(request: GetThreadChannelRequest): Promise<GetThreadChannelResult>;
    getThreadMessage(request: GetThreadMessageRequest): Promise<GetThreadMessageResult>;
    readThread(request: ReadThreadRequest): Promise<ReadThreadResult>;
    reactToMessage(request: ReactToMessageRequest): Promise<ReactToMessageResult>;
    getReactions(request: GetReactionsRequest): Promise<GetReactionsResult>;
    removeReaction(request: RemoveReactionRequest): Promise<RemoveReactionResult>;
    deleteMessageForMe(request: DeleteMessageForMeRequest): Promise<DeleteMessageForMeResult>;
    deleteMessage(request: DeleteMessageRequest): Promise<DeleteMessageResult>;
    sendKeystrokes(request: SendKeystrokesRequest): void;
    onNotificationReceived(onNextOrObserver: ChatKittyObserver<Notification> | ((notification: Notification) => void)): ChatKittyUnsubscribe;
    onChannelJoined(onNextOrObserver: ChatKittyObserver<Channel> | ((channel: Channel) => void)): ChatKittyUnsubscribe;
    onChannelHidden(onNextOrObserver: ChatKittyObserver<Channel> | ((channel: Channel) => void)): ChatKittyUnsubscribe;
    onChannelUnhidden(onNextOrObserver: ChatKittyObserver<Channel> | ((channel: Channel) => void)): ChatKittyUnsubscribe;
    onChannelLeft(onNextOrObserver: ChatKittyObserver<Channel> | ((channel: Channel) => void)): ChatKittyUnsubscribe;
    onChannelUpdated(onNextOrObserver: ChatKittyObserver<Channel> | ((channel: Channel) => void)): ChatKittyUnsubscribe;
    getChannelMembers(request: GetChannelMembersRequest): Promise<GetUsersResult>;
    getReadReceipts(request: GetReadReceiptsRequest): Promise<GetReadReceiptsResult>;
    getUsers(request?: GetUsersRequest): Promise<GetUsersResult>;
    getUsersCount(request?: GetUsersRequest): Promise<GetCountResult>;
    onUserPresenceChanged(onNextOrObserver: ChatKittyObserver<User> | ((user: User) => void)): ChatKittyUnsubscribe;
    inviteUser(request: InviteUserRequest): Promise<InviteUserResult>;
    onParticipantStartedTyping(onNextOrObserver: ChatKittyObserver<User> | ((participant: User) => void)): ChatKittyUnsubscribe;
    onParticipantStoppedTyping(onNextOrObserver: ChatKittyObserver<User> | ((participant: User) => void)): ChatKittyUnsubscribe;
    getUser(param: number): Promise<GetUserResult>;
    getUserIsChannelMember(request: GetUserIsChannelMemberRequest): Promise<GetUserIsChannelMemberResult>;
    blockUser(request: BlockUserRequest): Promise<BlockUserResult>;
    getUserBlockList(): Promise<GetUserBlockListResult>;
    deleteUserBlockListItem(request: DeleteUserBlockListItemRequest): Promise<DeleteUserBlockListItemResult>;
}
export interface Calls {
    localStream: MediaStream | null;
    isMuted: boolean;
    initialize(configuration: {
        media: {
            audio: boolean;
            video: boolean;
        };
    }): void;
    leaveCall(): void;
    switchCamera(): void;
    toggleMute(): void;
    onParticipantAcceptedCall(onNextOrObserver: ChatKittyObserver<User> | ((user: User) => void)): ChatKittyUnsubscribe;
    onParticipantRejectedCall(onNextOrObserver: ChatKittyObserver<User> | ((user: User) => void)): ChatKittyUnsubscribe;
    onParticipantActive(onNextOrObserver: ChatKittyObserver<{
        user: User;
        stream: MediaStream;
    }> | ((user: User, stream: MediaStream) => void)): ChatKittyUnsubscribe;
    onParticipantLeftCall(onNextOrObserver: ChatKittyObserver<User> | ((user: User) => void)): ChatKittyUnsubscribe;
    close(): void;
}
export default ChatKittyImpl;
