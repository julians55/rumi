"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChatKittyImpl = void 0;
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var environment_1 = require("../environment/environment");
var stompx_1 = __importDefault(require("../stompx"));
var channel_1 = require("./channel");
var chat_session_1 = require("./chat-session");
var current_user_1 = require("./current-user");
var event_1 = require("./event");
var file_1 = require("./file");
var message_1 = require("./message");
var pagination_1 = require("./pagination");
var reaction_1 = require("./reaction");
var read_receipt_1 = require("./read-receipt");
var result_1 = require("./result");
var thread_1 = require("./thread");
var user_1 = require("./user");
var user_block_list_item_1 = require("./user-block-list-item");
var user_session_1 = require("./user-session");
var ChatKittyImpl = /** @class */ (function () {
    function ChatKittyImpl(configuration) {
        var _this = this;
        this.configuration = configuration;
        this.currentUserSubject = new rxjs_1.BehaviorSubject(null);
        this.lostConnectionSubject = new rxjs_1.Subject();
        this.resumedConnectionSubject = new rxjs_1.Subject();
        this.chatSessions = new Map();
        this.messageMapper = new MessageMapper('');
        this.keyStrokesSubject = new rxjs_1.Subject();
        this.Calls = new (/** @class */ (function () {
            function ChatKittyCalls(kitty) {
                this.kitty = kitty;
                this.localStream = null;
                this.isMuted = false;
            }
            ChatKittyCalls.prototype.initialize = function (configuration) {
                // TODO
            };
            ChatKittyCalls.prototype.leaveCall = function () {
                // TODO
            };
            ChatKittyCalls.prototype.switchCamera = function () {
                // TODO
            };
            ChatKittyCalls.prototype.toggleMute = function () {
                // TODO
            };
            ChatKittyCalls.prototype.onParticipantAcceptedCall = function (onNextOrObserver) {
                // TODO
                return function () {
                    // TODO
                };
            };
            ChatKittyCalls.prototype.onParticipantRejectedCall = function (onNextOrObserver) {
                // TODO
                return function () {
                    // TODO
                };
            };
            ChatKittyCalls.prototype.onParticipantActive = function (onNextOrObserver) {
                // TODO
                return function () {
                    // TODO
                };
            };
            ChatKittyCalls.prototype.onParticipantLeftCall = function (onNextOrObserver) {
                // TODO
                return function () {
                    // TODO
                };
            };
            ChatKittyCalls.prototype.close = function () {
                // TODO
            };
            return ChatKittyCalls;
        }()))(this);
        this.stompX = new stompx_1.default({
            isSecure: configuration.isSecure === undefined || configuration.isSecure,
            host: configuration.host || 'api.chatkitty.com',
            isDebug: !environment_1.environment.production,
        });
        this.keyStrokesSubject
            .asObservable()
            .pipe((0, operators_1.debounceTime)(150))
            .subscribe(function (request) {
            var destination = '';
            var channel = request.channel;
            var thread = request.thread;
            if (channel) {
                destination = channel._actions.keystrokes;
            }
            if (thread) {
                destination = thread._actions.keystrokes;
            }
            _this.stompX.sendAction({
                destination: destination,
                body: {
                    keys: request.keys,
                },
            });
        });
    }
    ChatKittyImpl.getInstance = function (apiKey) {
        var instance = ChatKittyImpl._instances.get(apiKey);
        if (instance !== undefined) {
            return instance;
        }
        instance = new ChatKittyImpl({ apiKey: apiKey });
        ChatKittyImpl._instances.set(apiKey, instance);
        return instance;
    };
    ChatKittyImpl.channelRelay = function (id) {
        return '/application/v1/channels/' + id + '.relay';
    };
    ChatKittyImpl.userRelay = function (id) {
        return '/application/v1/users/' + id + '.relay';
    };
    ChatKittyImpl.prototype.startSession = function (request) {
        var _this = this;
        if (this.stompX.initialized) {
            throw new user_session_1.SessionActiveError();
        }
        return new Promise(function (resolve) {
            _this.stompX.connect({
                apiKey: _this.configuration.apiKey,
                username: request.username,
                authParams: request.authParams,
                onSuccess: function (user, writeFileGrant, readFileGrant) {
                    _this.stompX.listenToTopic({ topic: user._topics.self });
                    _this.stompX.listenToTopic({ topic: user._topics.channels });
                    _this.stompX.listenToTopic({ topic: user._topics.messages });
                    _this.stompX.listenToTopic({ topic: user._topics.notifications });
                    _this.stompX.listenToTopic({ topic: user._topics.contacts });
                    _this.stompX.listenToTopic({ topic: user._topics.participants });
                    _this.stompX.listenToTopic({ topic: user._topics.users });
                    _this.stompX.listenToTopic({ topic: user._topics.reactions });
                    _this.stompX.listenToTopic({ topic: user._topics.threads });
                    _this.stompX.listenToTopic({ topic: user._topics.calls });
                    _this.writeFileGrant = writeFileGrant;
                    _this.messageMapper = new MessageMapper(readFileGrant);
                    resolve(new user_session_1.StartedSessionResult({ user: user }));
                },
                onConnected: function (user) {
                    _this.currentUser = user;
                    _this.currentUserSubject.next(user);
                },
                onConnectionLost: function () { return _this.lostConnectionSubject.next(); },
                onConnectionResumed: function () { return _this.resumedConnectionSubject.next(); },
                onError: function (error) {
                    resolve(new result_1.ChatKittyFailedResult(error));
                },
            });
        });
    };
    ChatKittyImpl.prototype.endSession = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.stompX.disconnect({
                onSuccess: function () {
                    _this.currentUser = undefined;
                    _this.currentUserSubject.next(null);
                    resolve();
                },
                onError: function (e) {
                    reject(e);
                },
            });
        });
    };
    ChatKittyImpl.prototype.getCurrentUser = function () {
        var _this = this;
        var currentUser = this.currentUser;
        if (!currentUser) {
            throw new user_session_1.NoActiveSessionError();
        }
        return new Promise(function (resolve) {
            _this.stompX.relayResource({
                destination: currentUser._relays.self,
                onSuccess: function (user) {
                    resolve(new current_user_1.GetCurrentUserSuccessfulResult(user));
                },
                onError: function (error) {
                    resolve(new result_1.ChatKittyFailedResult(error));
                },
            });
        });
    };
    ChatKittyImpl.prototype.onCurrentUserChanged = function (onNextOrObserver) {
        var subscription = this.currentUserSubject.subscribe(function (user) {
            if (typeof onNextOrObserver === 'function') {
                onNextOrObserver(user);
            }
            else {
                onNextOrObserver.onNext(user);
            }
        });
        return function () { return subscription.unsubscribe(); };
    };
    ChatKittyImpl.prototype.onCurrentUserOnline = function (onNextOrObserver) {
        var _this = this;
        var subscription = this.resumedConnectionSubject.subscribe(function () {
            if (typeof onNextOrObserver === 'function') {
                onNextOrObserver();
            }
            else {
                if (_this.currentUser) {
                    onNextOrObserver.onNext(_this.currentUser);
                }
            }
        });
        return function () { return subscription.unsubscribe(); };
    };
    ChatKittyImpl.prototype.onCurrentUserOffline = function (onNextOrObserver) {
        var _this = this;
        var subscription = this.lostConnectionSubject.subscribe(function () {
            if (typeof onNextOrObserver === 'function') {
                onNextOrObserver();
            }
            else {
                if (_this.currentUser) {
                    onNextOrObserver.onNext(_this.currentUser);
                }
            }
        });
        return function () { return subscription.unsubscribe(); };
    };
    ChatKittyImpl.prototype.updateCurrentUser = function (update) {
        var _this = this;
        var currentUser = this.currentUser;
        if (!currentUser) {
            throw new user_session_1.NoActiveSessionError();
        }
        return new Promise(function (resolve) {
            _this.stompX.sendAction({
                destination: currentUser._actions.update,
                body: update(currentUser),
                onSuccess: function (user) {
                    _this.currentUserSubject.next(user);
                    resolve(new current_user_1.UpdatedCurrentUserResult(user));
                },
                onError: function (error) {
                    resolve(new result_1.ChatKittyFailedResult(error));
                },
            });
        });
    };
    ChatKittyImpl.prototype.updateCurrentUserDisplayPicture = function (request) {
        var _this = this;
        var currentUser = this.currentUser;
        if (!currentUser) {
            throw new user_session_1.NoActiveSessionError();
        }
        return new Promise(function (resolve) {
            var file = request.file;
            if (file.uri) {
                _this.stompX.sendToStream({
                    stream: currentUser._streams.displayPicture,
                    grant: _this.writeFileGrant,
                    file: file,
                    onSuccess: function (user) {
                        resolve(new current_user_1.UpdatedCurrentUserDisplayPictureResult(user));
                    },
                    onError: function (error) {
                        resolve(new result_1.ChatKittyFailedResult(error));
                    },
                    progressListener: {
                        onStarted: function () { var _a, _b; return (_b = (_a = request.progressListener) === null || _a === void 0 ? void 0 : _a.onStarted) === null || _b === void 0 ? void 0 : _b.call(_a); },
                        onProgress: function (progress) { var _a; return (_a = request.progressListener) === null || _a === void 0 ? void 0 : _a.onProgress(progress); },
                        onCompleted: function () {
                            var _a;
                            return (_a = request.progressListener) === null || _a === void 0 ? void 0 : _a.onCompleted(file_1.ChatKittyUploadResult.COMPLETED);
                        },
                        onFailed: function () {
                            var _a;
                            return (_a = request.progressListener) === null || _a === void 0 ? void 0 : _a.onCompleted(file_1.ChatKittyUploadResult.FAILED);
                        },
                        onCancelled: function () {
                            var _a;
                            return (_a = request.progressListener) === null || _a === void 0 ? void 0 : _a.onCompleted(file_1.ChatKittyUploadResult.CANCELLED);
                        },
                    },
                });
            }
            else {
                _this.stompX.sendAction({
                    destination: currentUser._actions.updateDisplayPicture,
                    body: file,
                    onSuccess: function (user) {
                        resolve(new current_user_1.UpdatedCurrentUserResult(user));
                    },
                    onError: function (error) {
                        resolve(new result_1.ChatKittyFailedResult(error));
                    },
                });
            }
        });
    };
    ChatKittyImpl.prototype.updateChannel = function (request) {
        var _this = this;
        return new Promise(function (resolve) {
            _this.stompX.sendAction({
                destination: request.channel._actions.update,
                body: request.channel,
                onSuccess: function (channel) {
                    resolve(new channel_1.UpdatedChannelResult(channel));
                },
                onError: function (error) {
                    resolve(new result_1.ChatKittyFailedResult(error));
                },
            });
        });
    };
    ChatKittyImpl.prototype.deleteChannel = function (request) {
        var _this = this;
        return new Promise(function (resolve) {
            _this.stompX.sendAction({
                destination: request.channel._actions.delete,
                body: {},
                onSuccess: function () {
                    resolve(new channel_1.DeletedChannelResult());
                },
                onError: function (error) {
                    resolve(new result_1.ChatKittyFailedResult(error));
                },
            });
        });
    };
    ChatKittyImpl.prototype.createChannel = function (request) {
        var _this = this;
        var currentUser = this.currentUser;
        if (!currentUser) {
            throw new user_session_1.NoActiveSessionError();
        }
        return new Promise(function (resolve) {
            _this.stompX.sendAction({
                destination: currentUser._actions.createChannel,
                events: ['user.channel.created', 'user.channel.upserted', 'member.channel.upserted'],
                body: request,
                onSuccess: function (channel) {
                    resolve(new channel_1.CreatedChannelResult(channel));
                },
                onError: function (error) {
                    resolve(new result_1.ChatKittyFailedResult(error));
                },
            });
        });
    };
    ChatKittyImpl.prototype.getChannels = function (request) {
        var _this = this;
        var currentUser = this.currentUser;
        if (!currentUser) {
            throw new user_session_1.NoActiveSessionError();
        }
        return new Promise(function (resolve) {
            var _a, _b, _c, _d;
            var parameters = {};
            var relay = currentUser._relays.channels;
            if (isGetChannelsRequest(request)) {
                if (((_a = request.filter) === null || _a === void 0 ? void 0 : _a.joined) === false) {
                    relay = currentUser._relays.joinableChannels;
                }
                if (((_b = request.filter) === null || _b === void 0 ? void 0 : _b.joined) === true) {
                    parameters.subscribable = true;
                }
                if ((_c = request.filter) === null || _c === void 0 ? void 0 : _c.unread) {
                    relay = currentUser._relays.unreadChannels;
                }
            }
            var name = (_d = request === null || request === void 0 ? void 0 : request.filter) === null || _d === void 0 ? void 0 : _d.name;
            if (name) {
                parameters.name = name;
            }
            pagination_1.ChatKittyPaginator.createInstance({
                stompX: _this.stompX,
                relay: relay,
                contentName: 'channels',
                parameters: parameters,
            })
                .then(function (paginator) { return resolve(new channel_1.GetChannelsSucceededResult(paginator)); })
                .catch(function (error) { return resolve(new result_1.ChatKittyFailedResult(error)); });
        });
    };
    ChatKittyImpl.prototype.getChannel = function (id) {
        var _this = this;
        return new Promise(function (resolve) {
            _this.stompX.relayResource({
                destination: ChatKittyImpl.channelRelay(id),
                onSuccess: function (channel) {
                    resolve(new channel_1.GetChannelSucceededResult(channel));
                },
                onError: function (error) {
                    resolve(new result_1.ChatKittyFailedResult(error));
                },
            });
        });
    };
    ChatKittyImpl.prototype.joinChannel = function (request) {
        var _this = this;
        var currentUser = this.currentUser;
        if (!currentUser) {
            throw new user_session_1.NoActiveSessionError();
        }
        var destination = request.channel._actions.join;
        if (!destination) {
            throw new channel_1.ChannelNotPubliclyJoinableError(request.channel);
        }
        return new Promise(function (resolve) {
            _this.stompX.sendAction({
                destination: destination,
                body: request,
                onSuccess: function (channel) {
                    resolve(new channel_1.JoinedChannelResult(channel));
                },
                onError: function (error) {
                    resolve(new result_1.ChatKittyFailedResult(error));
                },
            });
        });
    };
    ChatKittyImpl.prototype.leaveChannel = function (request) {
        var _this = this;
        var currentUser = this.currentUser;
        if (!currentUser) {
            throw new user_session_1.NoActiveSessionError();
        }
        var destination = request.channel._actions.leave;
        if (!destination) {
            throw new channel_1.NotAChannelMemberError(request.channel);
        }
        return new Promise(function (resolve) {
            _this.stompX.sendAction({
                destination: destination,
                body: {},
                onSuccess: function (channel) {
                    resolve(new channel_1.LeftChannelResult(channel));
                },
                onError: function (error) {
                    resolve(new result_1.ChatKittyFailedResult(error));
                },
            });
        });
    };
    ChatKittyImpl.prototype.addChannelModerator = function (request) {
        var _this = this;
        var destination = request.channel._actions.addModerator;
        if (!destination) {
            throw new channel_1.CannotAddModeratorToChannelError(request.channel);
        }
        return new Promise(function (resolve) {
            _this.stompX.sendAction({
                destination: destination,
                body: request.user,
                onSuccess: function (channel) {
                    resolve(new channel_1.AddedChannelModeratorResult(channel));
                },
                onError: function (error) {
                    resolve(new result_1.ChatKittyFailedResult(error));
                },
            });
        });
    };
    ChatKittyImpl.prototype.getUnreadChannelsCount = function (request) {
        var _this = this;
        var _a;
        var currentUser = this.currentUser;
        if (!currentUser) {
            throw new user_session_1.NoActiveSessionError();
        }
        var parameters = {
            unread: true,
        };
        if (isGetChannelsUnreadRequest(request)) {
            parameters.type = (_a = request.filter) === null || _a === void 0 ? void 0 : _a.type;
        }
        return new Promise(function (resolve) {
            _this.stompX.relayResource({
                destination: currentUser._relays.channelsCount,
                parameters: parameters,
                onSuccess: function (resource) {
                    resolve(new result_1.GetCountSucceedResult(resource.count));
                },
                onError: function (error) {
                    resolve(new result_1.ChatKittyFailedResult(error));
                },
            });
        });
    };
    ChatKittyImpl.prototype.getChannelUnread = function (request) {
        var _this = this;
        var currentUser = this.currentUser;
        if (!currentUser) {
            throw new user_session_1.NoActiveSessionError();
        }
        return new Promise(function (resolve) {
            _this.stompX.relayResource({
                destination: request.channel._relays.unread,
                onSuccess: function (resource) {
                    resolve(new channel_1.GetChannelUnreadSucceededResult(resource.exists));
                },
                onError: function (error) {
                    resolve(new result_1.ChatKittyFailedResult(error));
                },
            });
        });
    };
    ChatKittyImpl.prototype.readChannel = function (request) {
        var _this = this;
        var currentUser = this.currentUser;
        if (!currentUser) {
            throw new user_session_1.NoActiveSessionError();
        }
        return new Promise(function (resolve) {
            _this.stompX.sendAction({
                destination: request.channel._actions.read,
                body: {},
                onSent: function () { return resolve(new channel_1.ReadChannelSucceededResult(request.channel)); },
                onError: function (error) { return resolve(new result_1.ChatKittyFailedResult(error)); },
            });
        });
    };
    ChatKittyImpl.prototype.muteChannel = function (request) {
        var _this = this;
        var currentUser = this.currentUser;
        if (!currentUser) {
            throw new user_session_1.NoActiveSessionError();
        }
        return new Promise(function (resolve) {
            _this.stompX.sendAction({
                destination: request.channel._actions.mute,
                body: {
                    state: 'ON',
                },
                onSuccess: function (channel) {
                    resolve(new channel_1.MutedChannelResult(channel));
                },
                onError: function (error) {
                    resolve(new result_1.ChatKittyFailedResult(error));
                },
            });
        });
    };
    ChatKittyImpl.prototype.unmuteChannel = function (request) {
        var _this = this;
        var currentUser = this.currentUser;
        if (!currentUser) {
            throw new user_session_1.NoActiveSessionError();
        }
        return new Promise(function (resolve) {
            _this.stompX.sendAction({
                destination: request.channel._actions.mute,
                body: {
                    state: 'OFF',
                },
                onSuccess: function (channel) {
                    resolve(new channel_1.UnmutedChannelResult(channel));
                },
                onError: function (error) {
                    resolve(new result_1.ChatKittyFailedResult(error));
                },
            });
        });
    };
    ChatKittyImpl.prototype.clearChannelHistory = function (request) {
        var _this = this;
        var currentUser = this.currentUser;
        if (!currentUser) {
            throw new user_session_1.NoActiveSessionError();
        }
        return new Promise(function (resolve) {
            _this.stompX.sendAction({
                destination: request.channel._actions.clearHistory,
                body: {},
                onSuccess: function (channel) {
                    return resolve(new channel_1.ClearChannelHistorySucceededResult(channel));
                },
                onError: function (error) { return resolve(new result_1.ChatKittyFailedResult(error)); },
            });
        });
    };
    ChatKittyImpl.prototype.hideChannel = function (request) {
        var _this = this;
        return new Promise(function (resolve) {
            _this.stompX.sendAction({
                destination: request.channel._actions.hide,
                body: {},
                onSuccess: function (resource) {
                    return resolve(new channel_1.HideChannelSucceededResult(resource));
                },
                onError: function (error) { return resolve(new result_1.ChatKittyFailedResult(error)); },
            });
        });
    };
    ChatKittyImpl.prototype.startChatSession = function (request) {
        var _this = this;
        var onReceivedMessage = request.onReceivedMessage;
        var onReceivedKeystrokes = request.onReceivedKeystrokes;
        var onParticipantEnteredChat = request.onParticipantEnteredChat;
        var onParticipantLeftChat = request.onParticipantLeftChat;
        var onTypingStarted = request.onTypingStarted;
        var onTypingStopped = request.onTypingStopped;
        var onParticipantPresenceChanged = request.onParticipantPresenceChanged;
        var onEventTriggered = request.onEventTriggered;
        var onMessageUpdated = request.onMessageUpdated;
        var onChannelUpdated = request.onChannelUpdated;
        var onMessageRead = request.onMessageRead;
        var onMessageReactionAdded = request.onMessageReactionAdded;
        var onMessageReactionRemoved = request.onMessageReactionRemoved;
        var onThreadReceivedMessage = request.onThreadReceivedMessage;
        var onThreadReceivedKeystrokes = request.onThreadReceivedKeystrokes;
        var onThreadTypingStarted = request.onThreadTypingStarted;
        var onThreadTypingStopped = request.onThreadTypingStopped;
        var receivedMessageUnsubscribe;
        var receivedKeystrokesUnsubscribe;
        var participantEnteredChatUnsubscribe;
        var participantLeftChatUnsubscribe;
        var typingStartedUnsubscribe;
        var typingStoppedUnsubscribe;
        var participantPresenceChangedUnsubscribe;
        var eventTriggeredUnsubscribe;
        var messageUpdatedUnsubscribe;
        var channelUpdatedUnsubscribe;
        var messageReadUnsubscribe;
        var messageReactionAddedUnsubscribe;
        var messageReactionRemovedUnsubscribe;
        var threadReceivedMessageUnsubscribe;
        var threadReceivedKeystrokesUnsubscribe;
        var threadTypingStartedUnsubscribe;
        var threadTypingStoppedUnsubscribe;
        if (onReceivedMessage) {
            receivedMessageUnsubscribe = this.stompX.listenForEvent({
                topic: request.channel._topics.messages,
                event: 'channel.message.created',
                onSuccess: function (message) {
                    var destination = message._relays.parent;
                    if (destination) {
                        _this.stompX.relayResource({
                            destination: destination,
                            onSuccess: function (parent) {
                                onReceivedMessage(_this.messageMapper.map(message), _this.messageMapper.map(parent));
                            },
                        });
                    }
                    else {
                        onReceivedMessage(_this.messageMapper.map(message));
                    }
                },
            });
        }
        if (onReceivedKeystrokes) {
            receivedKeystrokesUnsubscribe = this.stompX.listenForEvent({
                topic: request.channel._topics.keystrokes,
                event: 'thread.keystrokes.created',
                onSuccess: function (keystrokes) {
                    onReceivedKeystrokes(keystrokes);
                },
            });
        }
        if (onTypingStarted) {
            typingStartedUnsubscribe = this.stompX.listenForEvent({
                topic: request.channel._topics.typing,
                event: 'thread.typing.started',
                onSuccess: function (user) {
                    onTypingStarted(user);
                },
            });
        }
        if (onTypingStopped) {
            typingStoppedUnsubscribe = this.stompX.listenForEvent({
                topic: request.channel._topics.typing,
                event: 'thread.typing.stopped',
                onSuccess: function (user) {
                    onTypingStopped(user);
                },
            });
        }
        if (onParticipantEnteredChat) {
            participantEnteredChatUnsubscribe = this.stompX.listenForEvent({
                topic: request.channel._topics.participants,
                event: 'channel.participant.active',
                onSuccess: function (user) {
                    onParticipantEnteredChat(user);
                },
            });
        }
        if (onParticipantLeftChat) {
            participantLeftChatUnsubscribe = this.stompX.listenForEvent({
                topic: request.channel._topics.participants,
                event: 'channel.participant.inactive',
                onSuccess: function (user) {
                    onParticipantLeftChat(user);
                },
            });
        }
        if (onParticipantPresenceChanged) {
            participantPresenceChangedUnsubscribe = this.stompX.listenForEvent({
                topic: request.channel._topics.participants,
                event: 'participant.presence.changed',
                onSuccess: function (user) {
                    onParticipantPresenceChanged(user);
                },
            });
        }
        if (onMessageUpdated) {
            messageUpdatedUnsubscribe = this.stompX.listenForEvent({
                topic: request.channel._topics.messages,
                event: 'thread.message.updated',
                onSuccess: function (message) {
                    onMessageUpdated(message);
                },
            });
        }
        if (onEventTriggered) {
            eventTriggeredUnsubscribe = this.stompX.listenForEvent({
                topic: request.channel._topics.events,
                event: 'channel.event.triggered',
                onSuccess: function (event) {
                    onEventTriggered(event);
                },
            });
        }
        if (onChannelUpdated) {
            channelUpdatedUnsubscribe = this.stompX.listenForEvent({
                topic: request.channel._topics.self,
                event: 'channel.self.updated',
                onSuccess: function (channel) {
                    onChannelUpdated(channel);
                },
            });
        }
        if (onMessageRead) {
            messageReadUnsubscribe = this.stompX.listenForEvent({
                topic: request.channel._topics.readReceipts,
                event: 'message.read_receipt.created',
                onSuccess: function (receipt) {
                    _this.stompX.relayResource({
                        destination: receipt._relays.message,
                        onSuccess: function (message) {
                            onMessageRead(message, receipt);
                        },
                    });
                },
            });
        }
        if (onMessageReactionAdded) {
            messageReactionAddedUnsubscribe = this.stompX.listenForEvent({
                topic: request.channel._topics.reactions,
                event: 'message.reaction.created',
                onSuccess: function (reaction) {
                    _this.stompX.relayResource({
                        destination: reaction._relays.message,
                        onSuccess: function (message) {
                            onMessageReactionAdded(message, reaction);
                        },
                    });
                },
            });
        }
        if (onMessageReactionRemoved) {
            messageReactionRemovedUnsubscribe = this.stompX.listenForEvent({
                topic: request.channel._topics.reactions,
                event: 'message.reaction.removed',
                onSuccess: function (reaction) {
                    _this.stompX.relayResource({
                        destination: reaction._relays.message,
                        onSuccess: function (message) {
                            onMessageReactionRemoved(message, reaction);
                        },
                    });
                },
            });
        }
        var end = function () {
            messageReactionRemovedUnsubscribe === null || messageReactionRemovedUnsubscribe === void 0 ? void 0 : messageReactionRemovedUnsubscribe();
            messageReactionAddedUnsubscribe === null || messageReactionAddedUnsubscribe === void 0 ? void 0 : messageReactionAddedUnsubscribe();
            messageReadUnsubscribe === null || messageReadUnsubscribe === void 0 ? void 0 : messageReadUnsubscribe();
            channelUpdatedUnsubscribe === null || channelUpdatedUnsubscribe === void 0 ? void 0 : channelUpdatedUnsubscribe();
            messageUpdatedUnsubscribe === null || messageUpdatedUnsubscribe === void 0 ? void 0 : messageUpdatedUnsubscribe();
            eventTriggeredUnsubscribe === null || eventTriggeredUnsubscribe === void 0 ? void 0 : eventTriggeredUnsubscribe();
            participantPresenceChangedUnsubscribe === null || participantPresenceChangedUnsubscribe === void 0 ? void 0 : participantPresenceChangedUnsubscribe();
            participantLeftChatUnsubscribe === null || participantLeftChatUnsubscribe === void 0 ? void 0 : participantLeftChatUnsubscribe();
            participantEnteredChatUnsubscribe === null || participantEnteredChatUnsubscribe === void 0 ? void 0 : participantEnteredChatUnsubscribe();
            typingStoppedUnsubscribe === null || typingStoppedUnsubscribe === void 0 ? void 0 : typingStoppedUnsubscribe();
            typingStartedUnsubscribe === null || typingStartedUnsubscribe === void 0 ? void 0 : typingStartedUnsubscribe();
            receivedKeystrokesUnsubscribe === null || receivedKeystrokesUnsubscribe === void 0 ? void 0 : receivedKeystrokesUnsubscribe();
            receivedMessageUnsubscribe === null || receivedMessageUnsubscribe === void 0 ? void 0 : receivedMessageUnsubscribe();
            threadReceivedMessageUnsubscribe === null || threadReceivedMessageUnsubscribe === void 0 ? void 0 : threadReceivedMessageUnsubscribe();
            threadReceivedKeystrokesUnsubscribe === null || threadReceivedKeystrokesUnsubscribe === void 0 ? void 0 : threadReceivedKeystrokesUnsubscribe();
            threadTypingStartedUnsubscribe === null || threadTypingStartedUnsubscribe === void 0 ? void 0 : threadTypingStartedUnsubscribe();
            threadTypingStoppedUnsubscribe === null || threadTypingStoppedUnsubscribe === void 0 ? void 0 : threadTypingStoppedUnsubscribe();
        };
        var channelUnsubscribe = this.stompX.listenToTopic({
            topic: request.channel._topics.self,
            onSuccess: function () {
                var messagesUnsubscribe = _this.stompX.listenToTopic({
                    topic: request.channel._topics.messages,
                });
                var keystrokesUnsubscribe = _this.stompX.listenToTopic({
                    topic: request.channel._topics.keystrokes,
                });
                var typingUnsubscribe = _this.stompX.listenToTopic({
                    topic: request.channel._topics.typing,
                });
                var participantsUnsubscribe = _this.stompX.listenToTopic({
                    topic: request.channel._topics.participants,
                });
                var readReceiptsUnsubscribe = _this.stompX.listenToTopic({
                    topic: request.channel._topics.readReceipts,
                });
                var reactionsUnsubscribe = _this.stompX.listenToTopic({
                    topic: request.channel._topics.reactions,
                });
                var eventsUnsubscribe = _this.stompX.listenToTopic({
                    topic: request.channel._topics.events,
                });
                var superEnd = end;
                end = function () {
                    superEnd();
                    eventsUnsubscribe === null || eventsUnsubscribe === void 0 ? void 0 : eventsUnsubscribe();
                    reactionsUnsubscribe === null || reactionsUnsubscribe === void 0 ? void 0 : reactionsUnsubscribe();
                    readReceiptsUnsubscribe === null || readReceiptsUnsubscribe === void 0 ? void 0 : readReceiptsUnsubscribe();
                    participantsUnsubscribe === null || participantsUnsubscribe === void 0 ? void 0 : participantsUnsubscribe();
                    typingUnsubscribe === null || typingUnsubscribe === void 0 ? void 0 : typingUnsubscribe();
                    keystrokesUnsubscribe === null || keystrokesUnsubscribe === void 0 ? void 0 : keystrokesUnsubscribe();
                    messagesUnsubscribe === null || messagesUnsubscribe === void 0 ? void 0 : messagesUnsubscribe();
                    channelUnsubscribe();
                    _this.chatSessions.delete(request.channel.id);
                };
            },
        });
        var activeThread = null;
        var session = {
            channel: request.channel,
            thread: activeThread,
            end: function () { return end(); },
            setThread: function (thread) {
                threadReceivedMessageUnsubscribe === null || threadReceivedMessageUnsubscribe === void 0 ? void 0 : threadReceivedMessageUnsubscribe();
                threadReceivedKeystrokesUnsubscribe === null || threadReceivedKeystrokesUnsubscribe === void 0 ? void 0 : threadReceivedKeystrokesUnsubscribe();
                threadTypingStartedUnsubscribe === null || threadTypingStartedUnsubscribe === void 0 ? void 0 : threadTypingStartedUnsubscribe();
                threadTypingStoppedUnsubscribe === null || threadTypingStoppedUnsubscribe === void 0 ? void 0 : threadTypingStoppedUnsubscribe();
                if (onThreadReceivedMessage) {
                    threadReceivedMessageUnsubscribe = _this.stompX.listenForEvent({
                        topic: thread._topics.messages,
                        event: 'thread.message.created',
                        onSuccess: function (message) {
                            onThreadReceivedMessage(thread, _this.messageMapper.map(message));
                        },
                    });
                }
                if (onThreadReceivedKeystrokes) {
                    threadReceivedKeystrokesUnsubscribe = _this.stompX.listenForEvent({
                        topic: thread._topics.keystrokes,
                        event: 'thread.keystrokes.created',
                        onSuccess: function (keystrokes) {
                            onThreadReceivedKeystrokes(thread, keystrokes);
                        },
                    });
                }
                if (onThreadTypingStarted) {
                    threadTypingStartedUnsubscribe = _this.stompX.listenForEvent({
                        topic: thread._topics.typing,
                        event: 'thread.typing.started',
                        onSuccess: function (user) {
                            onThreadTypingStarted(thread, user);
                        },
                    });
                }
                if (onThreadTypingStopped) {
                    threadTypingStoppedUnsubscribe = _this.stompX.listenForEvent({
                        topic: thread._topics.typing,
                        event: 'thread.typing.stopped',
                        onSuccess: function (user) {
                            onThreadTypingStopped(thread, user);
                        },
                    });
                }
                activeThread = thread;
            },
        };
        this.chatSessions.set(request.channel.id, session);
        return new chat_session_1.StartedChatSessionResult(session);
    };
    ChatKittyImpl.prototype.sendMessage = function (request) {
        var _this = this;
        var currentUser = this.currentUser;
        if (!currentUser) {
            throw new user_session_1.NoActiveSessionError();
        }
        return new Promise(function (resolve) {
            var destination = '';
            var stream = '';
            var sendChannelMessageRequest = request;
            if (sendChannelMessageRequest.channel !== undefined) {
                destination = sendChannelMessageRequest.channel._actions.message;
                stream = sendChannelMessageRequest.channel._streams.messages;
            }
            var sendMessageReplyRequest = request;
            if (sendMessageReplyRequest.message !== undefined) {
                destination = sendMessageReplyRequest.message._actions.reply;
                stream = sendMessageReplyRequest.message._streams.replies;
            }
            var sendThreadMessageRequest = request;
            if (sendThreadMessageRequest.thread !== undefined) {
                destination = sendThreadMessageRequest.thread._actions.message;
                stream = sendThreadMessageRequest.thread._streams.messages;
            }
            if (isSendChannelTextMessageRequest(request)) {
                _this.stompX.sendAction({
                    destination: destination,
                    body: {
                        type: 'TEXT',
                        body: request.body,
                        groupTag: request.groupTag,
                        properties: request.properties,
                    },
                    onSuccess: function (message) {
                        resolve(new message_1.SentTextMessageResult(_this.messageMapper.map(message)));
                    },
                    onError: function (error) {
                        resolve(new result_1.ChatKittyFailedResult(error));
                    },
                });
            }
            if (isSendChannelFileMessageRequest(request)) {
                var file = request.file;
                if (isCreateChatKittyExternalFileProperties(file)) {
                    _this.stompX.sendAction({
                        destination: destination,
                        body: {
                            type: 'FILE',
                            file: file,
                            groupTag: request.groupTag,
                            properties: request.properties,
                        },
                        onSuccess: function (message) {
                            resolve(new message_1.SentFileMessageResult(_this.messageMapper.map(message)));
                        },
                        onError: function (error) {
                            resolve(new result_1.ChatKittyFailedResult(error));
                        },
                    });
                }
                else {
                    var properties = new Map();
                    if (request.groupTag) {
                        properties.set('groupTag', request.groupTag);
                    }
                    if (request.properties) {
                        properties.set('properties', request.properties);
                    }
                    _this.stompX.sendToStream({
                        stream: stream,
                        grant: _this.writeFileGrant,
                        file: file,
                        properties: properties,
                        onSuccess: function (message) {
                            resolve(new message_1.SentFileMessageResult(_this.messageMapper.map(message)));
                        },
                        onError: function (error) {
                            resolve(new result_1.ChatKittyFailedResult(error));
                        },
                        progressListener: {
                            onStarted: function () { var _a, _b; return (_b = (_a = request.progressListener) === null || _a === void 0 ? void 0 : _a.onStarted) === null || _b === void 0 ? void 0 : _b.call(_a); },
                            onProgress: function (progress) { var _a; return (_a = request.progressListener) === null || _a === void 0 ? void 0 : _a.onProgress(progress); },
                            onCompleted: function () {
                                var _a;
                                return (_a = request.progressListener) === null || _a === void 0 ? void 0 : _a.onCompleted(file_1.ChatKittyUploadResult.COMPLETED);
                            },
                            onFailed: function () {
                                var _a;
                                return (_a = request.progressListener) === null || _a === void 0 ? void 0 : _a.onCompleted(file_1.ChatKittyUploadResult.FAILED);
                            },
                            onCancelled: function () {
                                var _a;
                                return (_a = request.progressListener) === null || _a === void 0 ? void 0 : _a.onCompleted(file_1.ChatKittyUploadResult.CANCELLED);
                            },
                        },
                    });
                }
            }
        });
    };
    ChatKittyImpl.prototype.getMessages = function (request) {
        var _this = this;
        var currentUser = this.currentUser;
        if (!currentUser) {
            throw new user_session_1.NoActiveSessionError();
        }
        var relay = '';
        var parameters = undefined;
        if (isGetChannelMessagesRequest(request)) {
            relay = request.channel._relays.messages;
            parameters = __assign({}, request.filter);
        }
        if (isGetMessageRepliesRequest(request)) {
            relay = request.message._relays.replies;
        }
        return new Promise(function (resolve) {
            pagination_1.ChatKittyPaginator.createInstance({
                stompX: _this.stompX,
                relay: relay,
                parameters: parameters,
                contentName: 'messages',
                mapper: function (message) { return _this.messageMapper.map(message); },
            })
                .then(function (paginator) { return resolve(new message_1.GetMessagesSucceededResult(paginator)); })
                .catch(function (error) { return resolve(new result_1.ChatKittyFailedResult(error)); });
        });
    };
    ChatKittyImpl.prototype.getUnreadMessagesCount = function (request) {
        var _this = this;
        var currentUser = this.currentUser;
        if (!currentUser) {
            throw new user_session_1.NoActiveSessionError();
        }
        var relay = currentUser._relays.unreadMessagesCount;
        if (isGetUnreadMessagesCountRequest(request)) {
            relay = request.channel._relays.messagesCount;
        }
        return new Promise(function (resolve) {
            _this.stompX.relayResource({
                destination: relay,
                parameters: {
                    unread: true,
                },
                onSuccess: function (resource) {
                    resolve(new result_1.GetCountSucceedResult(resource.count));
                },
                onError: function (error) {
                    resolve(new result_1.ChatKittyFailedResult(error));
                },
            });
        });
    };
    ChatKittyImpl.prototype.triggerEvent = function (request) {
        var _this = this;
        var currentUser = this.currentUser;
        if (!currentUser) {
            throw new user_session_1.NoActiveSessionError();
        }
        return new Promise(function (resolve) {
            _this.stompX.sendAction({
                destination: request.channel._actions.triggerEvent,
                body: {
                    type: request.type,
                    properties: request.properties
                },
                onSent: function () {
                    resolve(new event_1.TriggeredEventResult(request.channel));
                },
                onError: function (error) {
                    resolve(new result_1.ChatKittyFailedResult(error));
                },
            });
        });
    };
    ChatKittyImpl.prototype.readMessage = function (request) {
        var _this = this;
        return new Promise(function (resolve) {
            _this.stompX.sendAction({
                destination: request.message._actions.read,
                body: {},
                onSent: function () { return resolve(new message_1.ReadMessageSucceededResult(request.message)); },
                onError: function (error) { return resolve(new result_1.ChatKittyFailedResult(error)); },
            });
        });
    };
    ChatKittyImpl.prototype.getLastReadMessage = function (request) {
        var _this = this;
        return new Promise(function (resolve) {
            _this.stompX.relayResource({
                destination: request.channel._relays.lastReadMessage,
                parameters: {
                    username: request.username,
                },
                onSuccess: function (resource) {
                    resolve(new message_1.GetLastReadMessageResult(resource));
                },
                onError: function (error) {
                    resolve(new result_1.ChatKittyFailedResult(error));
                },
            });
        });
    };
    ChatKittyImpl.prototype.editMessage = function (request) {
        var _this = this;
        return new Promise(function (resolve) {
            _this.stompX.sendAction({
                destination: request.message._actions.edit,
                body: {
                    body: request.body,
                },
                onSuccess: function (message) {
                    return resolve(new message_1.EditedMessageSucceededResult(message));
                },
                onError: function (error) { return resolve(new result_1.ChatKittyFailedResult(error)); },
            });
        });
    };
    ChatKittyImpl.prototype.getMessageRepliesCount = function (request) {
        var _this = this;
        return new Promise(function (resolve) {
            _this.stompX.relayResource({
                destination: request.message._relays.repliesCount,
                onSuccess: function (resource) {
                    resolve(new result_1.GetCountSucceedResult(resource.count));
                },
                onError: function (error) {
                    resolve(new result_1.ChatKittyFailedResult(error));
                },
            });
        });
    };
    ChatKittyImpl.prototype.getMessageChannel = function (request) {
        var _this = this;
        return new Promise(function (resolve) {
            _this.stompX.relayResource({
                destination: request.message._relays.channel,
                onSuccess: function (resource) {
                    resolve(new message_1.GetMessageChannelSucceededResult(resource));
                },
                onError: function (error) {
                    resolve(new result_1.ChatKittyFailedResult(error));
                },
            });
        });
    };
    ChatKittyImpl.prototype.getMessageParent = function (request) {
        var _this = this;
        return new Promise(function (resolve) {
            var destination = request.message._relays.parent;
            if (!destination) {
                throw new message_1.MessageNotAReplyError(request.message);
            }
            _this.stompX.relayResource({
                destination: destination,
                onSuccess: function (resource) {
                    resolve(new message_1.GetMessageParentSucceededResult(resource));
                },
                onError: function (error) {
                    resolve(new result_1.ChatKittyFailedResult(error));
                },
            });
        });
    };
    ChatKittyImpl.prototype.createThread = function (request) {
        var _this = this;
        return new Promise(function (resolve) {
            _this.stompX.sendAction({
                destination: request.channel._actions.createThread,
                body: { name: request.name, properties: request.properties },
                onSuccess: function (thread) { return resolve(new thread_1.CreatedThreadResult(thread)); },
                onError: function (error) { return resolve(new result_1.ChatKittyFailedResult(error)); },
            });
        });
    };
    ChatKittyImpl.prototype.getThreads = function (request) {
        var _this = this;
        var _a, _b;
        var parameters = {};
        if (((_a = request.filter) === null || _a === void 0 ? void 0 : _a.includeMainThread) === false) {
            parameters.includeMainThread = false;
        }
        if (((_b = request.filter) === null || _b === void 0 ? void 0 : _b.standalone) === true) {
            parameters.standalone = true;
        }
        return new Promise(function (resolve) {
            pagination_1.ChatKittyPaginator.createInstance({
                stompX: _this.stompX,
                relay: request.channel._relays.threads,
                contentName: 'threads',
                parameters: parameters,
            })
                .then(function (paginator) {
                return resolve(new thread_1.GetThreadsSucceededResult(paginator));
            })
                .catch(function (error) { return resolve(new result_1.ChatKittyFailedResult(error)); });
        });
    };
    ChatKittyImpl.prototype.getThreadChannel = function (request) {
        var _this = this;
        return new Promise(function (resolve) {
            _this.stompX.relayResource({
                destination: request.thread._relays.channel,
                onSuccess: function (resource) {
                    resolve(new thread_1.GetThreadChannelSucceededResult(resource));
                },
                onError: function (error) {
                    resolve(new result_1.ChatKittyFailedResult(error));
                },
            });
        });
    };
    ChatKittyImpl.prototype.getThreadMessage = function (request) {
        var _this = this;
        return new Promise(function (resolve) {
            _this.stompX.relayResource({
                destination: request.thread._relays.message,
                onSuccess: function (resource) {
                    resolve(new thread_1.GetThreadMessageSucceededResult(resource));
                },
                onError: function (error) {
                    resolve(new result_1.ChatKittyFailedResult(error));
                },
            });
        });
    };
    ChatKittyImpl.prototype.readThread = function (request) {
        var _this = this;
        var currentUser = this.currentUser;
        if (!currentUser) {
            throw new user_session_1.NoActiveSessionError();
        }
        return new Promise(function (resolve) {
            _this.stompX.sendAction({
                destination: request.thread._actions.read,
                body: {},
                onSent: function () { return resolve(new thread_1.ReadThreadSucceededResult(request.thread)); },
                onError: function (error) { return resolve(new result_1.ChatKittyFailedResult(error)); },
            });
        });
    };
    ChatKittyImpl.prototype.reactToMessage = function (request) {
        var _this = this;
        return new Promise(function (resolve) {
            _this.stompX.sendAction({
                destination: request.message._actions.react,
                body: { emoji: request.emoji },
                onSuccess: function (reaction) { return resolve(new reaction_1.ReactedToMessageResult(reaction)); },
                onError: function (error) { return resolve(new result_1.ChatKittyFailedResult(error)); },
            });
        });
    };
    ChatKittyImpl.prototype.getReactions = function (request) {
        var _this = this;
        return new Promise(function (resolve) {
            pagination_1.ChatKittyPaginator.createInstance({
                stompX: _this.stompX,
                relay: request.message._relays.reactions,
                contentName: 'reactions',
            })
                .then(function (paginator) {
                return resolve(new reaction_1.GetReactionsSucceededResult(paginator));
            })
                .catch(function (error) { return resolve(new result_1.ChatKittyFailedResult(error)); });
        });
    };
    ChatKittyImpl.prototype.removeReaction = function (request) {
        var _this = this;
        return new Promise(function (resolve) {
            _this.stompX.sendAction({
                destination: request.message._actions.removeReaction,
                body: {
                    emoji: request.emoji,
                },
                onSuccess: function (reaction) { return resolve(new reaction_1.RemovedReactionResult(reaction)); },
                onError: function (error) { return resolve(new result_1.ChatKittyFailedResult(error)); },
            });
        });
    };
    ChatKittyImpl.prototype.deleteMessageForMe = function (request) {
        var _this = this;
        return new Promise(function (resolve) {
            _this.stompX.sendAction({
                destination: request.message._actions.deleteForMe,
                body: {},
                onSuccess: function (resource) {
                    return resolve(new message_1.DeleteMessageForMeSucceededResult(resource));
                },
                onError: function (error) { return resolve(new result_1.ChatKittyFailedResult(error)); },
            });
        });
    };
    ChatKittyImpl.prototype.deleteMessage = function (request) {
        var _this = this;
        return new Promise(function (resolve) {
            _this.stompX.sendAction({
                destination: request.message._actions.delete,
                body: {},
                onSuccess: function (resource) {
                    return resolve(new message_1.DeleteMessageSucceededResult(resource));
                },
                onError: function (error) { return resolve(new result_1.ChatKittyFailedResult(error)); },
            });
        });
    };
    ChatKittyImpl.prototype.sendKeystrokes = function (request) {
        var currentUser = this.currentUser;
        if (!currentUser) {
            throw new user_session_1.NoActiveSessionError();
        }
        this.keyStrokesSubject.next(request);
    };
    ChatKittyImpl.prototype.onNotificationReceived = function (onNextOrObserver) {
        var currentUser = this.currentUser;
        if (!currentUser) {
            throw new user_session_1.NoActiveSessionError();
        }
        var unsubscribe = this.stompX.listenForEvent({
            topic: currentUser._topics.notifications,
            event: 'user.notification.created',
            onSuccess: function (notification) {
                if (typeof onNextOrObserver === 'function') {
                    onNextOrObserver(notification);
                }
                else {
                    onNextOrObserver.onNext(notification);
                }
            },
        });
        return function () { return unsubscribe; };
    };
    ChatKittyImpl.prototype.onChannelJoined = function (onNextOrObserver) {
        var currentUser = this.currentUser;
        if (!currentUser) {
            throw new user_session_1.NoActiveSessionError();
        }
        var unsubscribe = this.stompX.listenForEvent({
            topic: currentUser._topics.channels,
            event: 'user.channel.joined',
            onSuccess: function (channel) {
                if (typeof onNextOrObserver === 'function') {
                    onNextOrObserver(channel);
                }
                else {
                    onNextOrObserver.onNext(channel);
                }
            },
        });
        return function () { return unsubscribe; };
    };
    ChatKittyImpl.prototype.onChannelHidden = function (onNextOrObserver) {
        var currentUser = this.currentUser;
        if (!currentUser) {
            throw new user_session_1.NoActiveSessionError();
        }
        var unsubscribe = this.stompX.listenForEvent({
            topic: currentUser._topics.channels,
            event: 'user.channel.hidden',
            onSuccess: function (channel) {
                if (typeof onNextOrObserver === 'function') {
                    onNextOrObserver(channel);
                }
                else {
                    onNextOrObserver.onNext(channel);
                }
            },
        });
        return function () { return unsubscribe; };
    };
    ChatKittyImpl.prototype.onChannelUnhidden = function (onNextOrObserver) {
        var currentUser = this.currentUser;
        if (!currentUser) {
            throw new user_session_1.NoActiveSessionError();
        }
        var unsubscribe = this.stompX.listenForEvent({
            topic: currentUser._topics.channels,
            event: 'user.channel.unhidden',
            onSuccess: function (channel) {
                if (typeof onNextOrObserver === 'function') {
                    onNextOrObserver(channel);
                }
                else {
                    onNextOrObserver.onNext(channel);
                }
            },
        });
        return function () { return unsubscribe; };
    };
    ChatKittyImpl.prototype.onChannelLeft = function (onNextOrObserver) {
        var currentUser = this.currentUser;
        if (!currentUser) {
            throw new user_session_1.NoActiveSessionError();
        }
        var unsubscribe = this.stompX.listenForEvent({
            topic: currentUser._topics.channels,
            event: 'user.channel.left',
            onSuccess: function (channel) {
                if (typeof onNextOrObserver === 'function') {
                    onNextOrObserver(channel);
                }
                else {
                    onNextOrObserver.onNext(channel);
                }
            },
        });
        return function () { return unsubscribe; };
    };
    ChatKittyImpl.prototype.onChannelUpdated = function (onNextOrObserver) {
        var currentUser = this.currentUser;
        if (!currentUser) {
            throw new user_session_1.NoActiveSessionError();
        }
        var unsubscribe = this.stompX.listenForEvent({
            topic: currentUser._topics.channels,
            event: 'user.channel.updated',
            onSuccess: function (channel) {
                if (typeof onNextOrObserver === 'function') {
                    onNextOrObserver(channel);
                }
                else {
                    onNextOrObserver.onNext(channel);
                }
            },
        });
        return function () { return unsubscribe; };
    };
    ChatKittyImpl.prototype.getChannelMembers = function (request) {
        var _this = this;
        var currentUser = this.currentUser;
        if (!currentUser) {
            throw new user_session_1.NoActiveSessionError();
        }
        return new Promise(function (resolve) {
            pagination_1.ChatKittyPaginator.createInstance({
                stompX: _this.stompX,
                relay: request.channel._relays.members,
                contentName: 'users',
                parameters: __assign({}, request.filter),
            })
                .then(function (paginator) { return resolve(new user_1.GetUsersSucceededResult(paginator)); })
                .catch(function (error) { return resolve(new result_1.ChatKittyFailedResult(error)); });
        });
    };
    ChatKittyImpl.prototype.getReadReceipts = function (request) {
        var _this = this;
        var currentUser = this.currentUser;
        if (!currentUser) {
            throw new user_session_1.NoActiveSessionError();
        }
        return new Promise(function (resolve) {
            pagination_1.ChatKittyPaginator.createInstance({
                stompX: _this.stompX,
                relay: request.message._relays.readReceipts,
                contentName: 'receipts',
            })
                .then(function (paginator) {
                return resolve(new read_receipt_1.GetReadReceiptsSucceededResult(paginator));
            })
                .catch(function (error) { return resolve(new result_1.ChatKittyFailedResult(error)); });
        });
    };
    ChatKittyImpl.prototype.getUsers = function (request) {
        var _this = this;
        var currentUser = this.currentUser;
        if (!currentUser) {
            throw new user_session_1.NoActiveSessionError();
        }
        return new Promise(function (resolve) {
            var parameters = undefined;
            if (isGetUsersRequest(request)) {
                parameters = __assign({}, request.filter);
            }
            pagination_1.ChatKittyPaginator.createInstance({
                stompX: _this.stompX,
                relay: currentUser._relays.contacts,
                contentName: 'users',
                parameters: parameters,
            })
                .then(function (paginator) { return resolve(new user_1.GetUsersSucceededResult(paginator)); })
                .catch(function (error) { return resolve(new result_1.ChatKittyFailedResult(error)); });
        });
    };
    ChatKittyImpl.prototype.getUsersCount = function (request) {
        var _this = this;
        var currentUser = this.currentUser;
        if (!currentUser) {
            throw new user_session_1.NoActiveSessionError();
        }
        return new Promise(function (resolve) {
            var parameters = undefined;
            if (isGetUsersRequest(request)) {
                parameters = __assign({}, request.filter);
            }
            _this.stompX.relayResource({
                destination: currentUser._relays.contactsCount,
                parameters: parameters,
                onSuccess: function (resource) {
                    resolve(new result_1.GetCountSucceedResult(resource.count));
                },
                onError: function (error) { return resolve(new result_1.ChatKittyFailedResult(error)); },
            });
        });
    };
    ChatKittyImpl.prototype.onUserPresenceChanged = function (onNextOrObserver) {
        var currentUser = this.currentUser;
        if (!currentUser) {
            throw new user_session_1.NoActiveSessionError();
        }
        var unsubscribe = this.stompX.listenForEvent({
            topic: currentUser._topics.contacts,
            event: 'contact.presence.changed',
            onSuccess: function (user) {
                if (typeof onNextOrObserver === 'function') {
                    onNextOrObserver(user);
                }
                else {
                    onNextOrObserver.onNext(user);
                }
            },
        });
        return function () { return unsubscribe; };
    };
    ChatKittyImpl.prototype.inviteUser = function (request) {
        var _this = this;
        var destination = request.channel._actions.invite;
        if (!destination) {
            throw new channel_1.ChannelNotInvitableError(request.channel);
        }
        return new Promise(function (resolve) {
            _this.stompX.sendAction({
                destination: destination,
                body: {
                    user: request.user,
                },
                onSuccess: function (resource) {
                    resolve(new channel_1.InvitedUserResult(resource));
                },
                onError: function (error) { return resolve(new result_1.ChatKittyFailedResult(error)); },
            });
        });
    };
    ChatKittyImpl.prototype.onParticipantStartedTyping = function (onNextOrObserver) {
        var currentUser = this.currentUser;
        if (!currentUser) {
            throw new user_session_1.NoActiveSessionError();
        }
        var unsubscribe = this.stompX.listenForEvent({
            topic: currentUser._topics.participants,
            event: 'participant.typing.started',
            onSuccess: function (participant) {
                if (typeof onNextOrObserver === 'function') {
                    onNextOrObserver(participant);
                }
                else {
                    onNextOrObserver.onNext(participant);
                }
            },
        });
        return function () { return unsubscribe; };
    };
    ChatKittyImpl.prototype.onParticipantStoppedTyping = function (onNextOrObserver) {
        var currentUser = this.currentUser;
        if (!currentUser) {
            throw new user_session_1.NoActiveSessionError();
        }
        var unsubscribe = this.stompX.listenForEvent({
            topic: currentUser._topics.participants,
            event: 'participant.typing.stopped',
            onSuccess: function (participant) {
                if (typeof onNextOrObserver === 'function') {
                    onNextOrObserver(participant);
                }
                else {
                    onNextOrObserver.onNext(participant);
                }
            },
        });
        return function () { return unsubscribe; };
    };
    ChatKittyImpl.prototype.getUser = function (param) {
        var _this = this;
        return new Promise(function (resolve) {
            _this.stompX.relayResource({
                destination: ChatKittyImpl.userRelay(param),
                onSuccess: function (user) {
                    resolve(new user_1.GetUserSucceededResult(user));
                },
            });
        });
    };
    ChatKittyImpl.prototype.getUserIsChannelMember = function (request) {
        var _this = this;
        var currentUser = this.currentUser;
        if (!currentUser) {
            throw new user_session_1.NoActiveSessionError();
        }
        return new Promise(function (resolve) {
            _this.stompX.relayResource({
                destination: request.user._relays.channelMember,
                parameters: {
                    channelId: request.channel.id,
                },
                onSuccess: function (resource) {
                    resolve(new user_1.GetUserIsChannelMemberSucceededResult(resource.exists));
                },
                onError: function (error) {
                    resolve(new result_1.ChatKittyFailedResult(error));
                },
            });
        });
    };
    ChatKittyImpl.prototype.blockUser = function (request) {
        var _this = this;
        return new Promise(function (resolve) {
            _this.stompX.sendAction({
                destination: "/application/v1/users/" + request.user.id + ".block",
                body: {},
                onSuccess: function (resource) {
                    resolve(new user_1.BlockUserSucceededResult(resource));
                },
                onError: function (error) { return resolve(new result_1.ChatKittyFailedResult(error)); },
            });
        });
    };
    ChatKittyImpl.prototype.getUserBlockList = function () {
        var _this = this;
        var currentUser = this.currentUser;
        if (!currentUser) {
            throw new user_session_1.NoActiveSessionError();
        }
        return new Promise(function (resolve) {
            pagination_1.ChatKittyPaginator.createInstance({
                stompX: _this.stompX,
                relay: currentUser._relays.userBlockListItems,
                contentName: 'items',
            })
                .then(function (paginator) {
                return resolve(new user_block_list_item_1.GetUserBlockListSucceededResult(paginator));
            })
                .catch(function (error) { return resolve(new result_1.ChatKittyFailedResult(error)); });
        });
    };
    ChatKittyImpl.prototype.deleteUserBlockListItem = function (request) {
        var _this = this;
        return new Promise(function (resolve) {
            _this.stompX.sendAction({
                destination: request.item._actions.delete,
                body: {},
                onSuccess: function (resource) {
                    return resolve(new user_block_list_item_1.DeleteUserBlockListItemSucceededResult(resource));
                },
                onError: function (error) { return resolve(new result_1.ChatKittyFailedResult(error)); },
            });
        });
    };
    ChatKittyImpl._instances = new Map();
    return ChatKittyImpl;
}());
exports.ChatKittyImpl = ChatKittyImpl;
var MessageMapper = /** @class */ (function () {
    function MessageMapper(grant) {
        this.readFileGrant = grant;
    }
    MessageMapper.prototype.map = function (message) {
        if ((0, message_1.isFileMessage)(message)) {
            return __assign(__assign({}, message), { file: __assign(__assign({}, message.file), { url: message.file.url + ("?grant=" + this.readFileGrant) }) });
        }
        else {
            return __assign({}, message);
        }
    };
    return MessageMapper;
}());
function isGetChannelsRequest(param) {
    var request = param;
    return (request === null || request === void 0 ? void 0 : request.filter) !== undefined;
}
function isGetUsersRequest(param) {
    var request = param;
    return (request === null || request === void 0 ? void 0 : request.filter) !== undefined;
}
function isGetChannelsUnreadRequest(param) {
    var request = param;
    return (request === null || request === void 0 ? void 0 : request.filter) !== undefined;
}
function isGetUnreadMessagesCountRequest(param) {
    var request = param;
    return (request === null || request === void 0 ? void 0 : request.channel) !== undefined;
}
function isSendChannelTextMessageRequest(request) {
    return request.body !== undefined;
}
function isSendChannelFileMessageRequest(request) {
    return request.file !== undefined;
}
function isGetChannelMessagesRequest(request) {
    return request.channel !== undefined;
}
function isGetMessageRepliesRequest(request) {
    return request.message !== undefined;
}
function isCreateChatKittyExternalFileProperties(result) {
    return (result.url !== undefined &&
        result.name !== undefined &&
        result.size !== undefined);
}
exports.default = ChatKittyImpl;
//# sourceMappingURL=data:application/json;base64,